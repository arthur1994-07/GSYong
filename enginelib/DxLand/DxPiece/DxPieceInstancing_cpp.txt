//#include "pch.h"
//
//#include "../../../InternalCommonLib/Define/TextureAddData.h"
//
//#include "../../DxTools/Material/NSShadowRenderForMaterial.h"
//#include "../../DxTools/DxViewPort.h"
//#include "./DxPieceStaticAni.h"
//#include "./DxPieceDef.h"
//#include "./DxPiece.h"
//
//#include "DxPieceInstancing.h"
//
//// ----------------------------------------------------------------------------
//#include "../../../SigmaCore/DebugInclude.h"
//// ----------------------------------------------------------------------------
//
//// Shadow 에서만 사용되는 Instancing
//DxPieceInstancing::DxPieceInstancing( DxStaticAniFrame* pStaticAniFrame )
//	: m_rStaticAniFrame(pStaticAniFrame)
//	, g_pInstanceDataVB(NULL)
//	, m_vMax(0.f,0.f,0.f)
//	, m_vMin(0.f,0.f,0.f)
//	, m_vCenter(0.f,0.f,0.f)
//	, m_fRadius(1.f)
//	, m_fAlpha(1.f)
//	, m_emGroundQulityPREV(TnL_FIXED)
//{
//}
//
//DxPieceInstancing::~DxPieceInstancing()
//{
//	SAFE_RELEASE( g_pInstanceDataVB );
//	m_rStaticAniFrame = NULL;
//	m_vecrPiece.clear();
//}
//
//void DxPieceInstancing::OnResetDevice( LPDIRECT3DDEVICEQ pd3dDevice )
//{
//	CreateVB( pd3dDevice );
//}
//
//void DxPieceInstancing::OnLostDevice()
//{
//	SAFE_RELEASE ( g_pInstanceDataVB );
//}
//
//void DxPieceInstancing::ExportPiece( VEC_PIECE& vecPIECE ) const
//{
//	for ( DWORD i=0; i<m_vecrPiece.size(); ++i )
//	{
//		vecPIECE.push_back( m_vecrPiece[i] );
//	}
//}
//
//BOOL DxPieceInstancing::Insert( DxPiece* pPiece )
//{
//	//FX_TYPE_CUSTOM 은 안되게 하도록 하자.
//	//FX_TYPE_CUSTOM
//
//	// IsTexType 가 유효한 Data 를 얻기 위해선 DxStaticAniFrame::FrameMoveMAT 가 한번은 호출 되어야 한다.
//	pPiece->FrameMoveRAD( TRUE );
//
//	// 카메라 충돌로 인한 반투명이 활성화 일 경우는 Instancing 불가.
//	if ( pPiece->GetPickAlpha() )
//		return FALSE;
//
//	// Spot Light 에 영향 받는 Piece 는 Instancing 에 들어올 수 없다.
//	if ( !pPiece->IS_PS_3_0_TYPE_ZERO_OR_CSM() )
//		return FALSE;
//
//	// Soft Alpha 가 있다면 Instancing 에 들어올 수 없다.
//	if ( m_rStaticAniFrame->IsTexType(EMTTF_ALPHA_SOFT) )
//		return FALSE;
//
//	// Animation 이 있다면 Instancing 에 들어올 수 없다.
//	if ( m_rStaticAniFrame->IsTexType(EMTTF_FRAMEANI_OPAQUE) )
//		return FALSE;
//
//	// Animation 이 있다면 Instancing 에 들어올 수 없다.
//	if ( m_rStaticAniFrame->IsTexType(EMTTF_FRAMEANI_ALPHA_HARD) )
//		return FALSE;
//
//	// Animation 이 있다면 Instancing 에 들어올 수 없다.
//	if ( m_rStaticAniFrame->IsTexType(EMTTF_FRAMEANI_ALPHA_SOFT) )
//		return FALSE;
//
//	m_vecrPiece.push_back( pPiece );
//
//	return TRUE;
//}
//
//void DxPieceInstancing::CreateVB( LPDIRECT3DDEVICEQ pd3dDevice )
//{
//	DWORD dwRefCount = m_vecrPiece.size();
//
//	// Create a  VB for the Instancing data
//	SAFE_RELEASE ( g_pInstanceDataVB );
//	pd3dDevice->CreateVertexBuffer( dwRefCount * sizeof( INSTANCEDATA ), D3DUSAGE_WRITEONLY | D3DUSAGE_DYNAMIC, 0, D3DPOOL_DEFAULT, &g_pInstanceDataVB, 0 );
//	if ( !g_pInstanceDataVB )
//	{
//		pd3dDevice->CreateVertexBuffer( dwRefCount * sizeof( INSTANCEDATA ), D3DUSAGE_WRITEONLY | D3DUSAGE_DYNAMIC, 0, D3DPOOL_SYSTEMMEM, &g_pInstanceDataVB, 0 );
//	}
//
//	for ( DWORD i=0; i<m_vecrPiece.size(); ++i )
//	{
//		m_vecrPiece[i]->FrameMoveStep( pd3dDevice, FALSE );
//	}
//
//	DWORD dwPieceNum = m_vecrPiece.size();
//
//	// 위치좌표를 넣는다.
//	{
//		INSTANCEDATA* pLocked = NULL;
//		g_pInstanceDataVB->Lock( 0, 0, (VOID**)&pLocked, D3DLOCK_DISCARD );
//		for ( DWORD i=0; i<dwPieceNum; ++i )
//		{
//			const PieceParameter* pPieceParameter = m_vecrPiece[i]->GetPieceParameter();
//
//			memcpy( &pLocked[i].m_vMatrix1_AC0W.x,		&m_vecrPiece[i]->m_matWorld._11, sizeof(D3DXVECTOR3) );
//			memcpy( &pLocked[i].m_vMatrix2_LMOffsetX.x,	&m_vecrPiece[i]->m_matWorld._21, sizeof(D3DXVECTOR3) );
//			memcpy( &pLocked[i].m_vMatrix3_LMOffsetY.x,	&m_vecrPiece[i]->m_matWorld._31, sizeof(D3DXVECTOR3) );
//			memcpy( &pLocked[i].m_vMatrix4.x,			&m_vecrPiece[i]->m_matWorld._41, sizeof(D3DXVECTOR4) );
//
//			pLocked[i].m_vVC_AC0XY.x = pPieceParameter->m_sLMBCData.m_pVoxelColor->x;
//			pLocked[i].m_vVC_AC0XY.y = pPieceParameter->m_sLMBCData.m_pVoxelColor->y;
//			pLocked[i].m_vVC_AC0XY.z = pPieceParameter->m_sLMBCData.m_pVoxelColor->z;
//			pLocked[i].m_vVC_AC0XY.w = NSMATH::ExportVector2ToFloat( pPieceParameter->m_sLMBCData.m_pAmbientCube[0].x/3, pPieceParameter->m_sLMBCData.m_pAmbientCube[0].y/3 );
//			
//			pLocked[i].m_vMatrix1_AC0W.w = pPieceParameter->m_sLMBCData.m_pAmbientCube[0].w;
//			pLocked[i].m_vMatrix2_LMOffsetX.w = pPieceParameter->m_vLightMapUV_Offset.x;
//			pLocked[i].m_vMatrix3_LMOffsetY.w = pPieceParameter->m_vLightMapUV_Offset.y;
//
//			pLocked[i].m_vAmbientCube_0Z_12_3X.x = NSMATH::ExportVector2ToFloat( pPieceParameter->m_sLMBCData.m_pAmbientCube[0].z/3, pPieceParameter->m_sLMBCData.m_pAmbientCube[1].x/3 );
//			pLocked[i].m_vAmbientCube_0Z_12_3X.y = NSMATH::ExportVector2ToFloat( pPieceParameter->m_sLMBCData.m_pAmbientCube[1].y/3, pPieceParameter->m_sLMBCData.m_pAmbientCube[1].z/3 );
//			pLocked[i].m_vAmbientCube_0Z_12_3X.z = NSMATH::ExportVector2ToFloat( pPieceParameter->m_sLMBCData.m_pAmbientCube[2].x/3, pPieceParameter->m_sLMBCData.m_pAmbientCube[2].y/3 );
//			pLocked[i].m_vAmbientCube_0Z_12_3X.w = NSMATH::ExportVector2ToFloat( pPieceParameter->m_sLMBCData.m_pAmbientCube[2].z/3, pPieceParameter->m_sLMBCData.m_pAmbientCube[3].x/3 );
//			pLocked[i].m_vAmbientCube_3YZ_45.x = NSMATH::ExportVector2ToFloat( pPieceParameter->m_sLMBCData.m_pAmbientCube[3].y/3, pPieceParameter->m_sLMBCData.m_pAmbientCube[3].z/3 );
//			pLocked[i].m_vAmbientCube_3YZ_45.y = NSMATH::ExportVector2ToFloat( pPieceParameter->m_sLMBCData.m_pAmbientCube[4].x/3, pPieceParameter->m_sLMBCData.m_pAmbientCube[4].y/3 );
//			pLocked[i].m_vAmbientCube_3YZ_45.z = NSMATH::ExportVector2ToFloat( pPieceParameter->m_sLMBCData.m_pAmbientCube[4].z/3, pPieceParameter->m_sLMBCData.m_pAmbientCube[5].x/3 );
//			pLocked[i].m_vAmbientCube_3YZ_45.w = NSMATH::ExportVector2ToFloat( pPieceParameter->m_sLMBCData.m_pAmbientCube[5].y/3, pPieceParameter->m_sLMBCData.m_pAmbientCube[5].z/3 );
//		}
//		g_pInstanceDataVB->Unlock();
//	}
//}
//
//void DxPieceInstancing::CalculateAABB()
//{
//	D3DXVECTOR3 vMax, vMin;
//	m_vMax = D3DXVECTOR3( -FLT_MAX, -FLT_MAX, -FLT_MAX );
//	m_vMin = D3DXVECTOR3( -FLT_MIN, -FLT_MIN, -FLT_MIN );
//	for ( DWORD i=0; i<m_vecrPiece.size(); ++i )
//	{
//		vMax = m_vecrPiece[i]->GetStaticMax();
//		vMin = m_vecrPiece[i]->GetStaticMin();
//
//		if ( m_vMax.x < vMax.x )
//			m_vMax.x = vMax.x;
//		if ( m_vMax.y < vMax.y )
//			m_vMax.y = vMax.y;
//		if ( m_vMax.z < vMax.z )
//			m_vMax.z = vMax.z;
//
//		if ( m_vMin.x > vMin.x )
//			m_vMin.x = vMin.x;
//		if ( m_vMin.y > vMin.y )
//			m_vMin.y = vMin.y;
//		if ( m_vMin.z > vMin.z )
//			m_vMin.z = vMin.z;
//	}
//
//	m_vCenter = (m_vMax+m_vMin)*0.5f;
//	D3DXVECTOR3 vHalf = m_vMax - m_vMin;
//	m_fRadius = D3DXVec3Length( &vHalf );
//}
//
//BOOL DxPieceInstancing::FrameMove_Instancing( LPDIRECT3DDEVICEQ pd3dDevice, float fElapsedTime )
//{
//	// AmbientCube 의 Color 가 TnL_PS_3_0_DF 랑 TnL_PS_3_0_NM, TnL_PS_3_0_CSM 의 값이 다르다.	//(LightMapBoxColorFullData::FrameMoveStep)
//	// 그래서 옵션이 바뀌면 재 셋팅을 해줘야한다.
//	// Bad Code
//	if ( m_emGroundQulityPREV != RENDERPARAM::g_emGroundQulity )
//	{
//		CreateVB( pd3dDevice );
//
//		m_emGroundQulityPREV = RENDERPARAM::g_emGroundQulity;
//	}
//
//	for ( DWORD i=0; i<m_vecrPiece.size(); ++i )
//	{
//		m_vecrPiece[i]->FrameMove_Instancing( fElapsedTime );
//	}
//
//	// 필수 정보들 Update 하는데 필요하다.
//	m_vecrPiece[0]->FrameMoveRAD( TRUE );
//	m_vecrPiece[0]->FrameMoveStep( pd3dDevice, FALSE );
//
//	// Soft Alpha 가 있다면 Instancing 에 들어올 수 없다.
//	if ( m_rStaticAniFrame->IsTexType(EMTTF_ALPHA_SOFT) )
//		return FALSE;
//
//	return TRUE;
//
//	//// Alpha 를 어떻게 할지 결정하도록 한다.
//	//{
//	//	float InvisibleRadius = m_vecrPiece[0]->GetInvisibleRadius();
//
//	//	const D3DXVECTOR3& vLookatPt = DxViewPort::GetInstance().GetLookatPt();
//	//	D3DXVECTOR3 vDir = m_vCenter - vLookatPt;
//	//	float fLengthLookat = D3DXVec3Length( &vDir );	// 카메라 까지의 거리
//	//	fLengthLookat -= m_fRadius;						// 물체의 반지름까지 계산해 준다.
//
//	//	float fAlphaSpeed = m_fAlpha;
//	//	fAlphaSpeed -= 0.5f;
//	//	fAlphaSpeed = fabsf( fAlphaSpeed );
//	//	fAlphaSpeed += 0.05f;		// 0.5 ~ 0.05 ~ 0.5					// 변화 속도 조절 가능.
//	//	fAlphaSpeed *= 1.5f;		// 수치2는 대략 1초 정도 걸린다.	// 변화 속도 조절 가능.
//	//	
//	//	
//	//	if ( InvisibleRadius >= fLengthLookat )
//	//	{
//	//		m_fAlpha = m_fAlpha + (fElapsedTime*fAlphaSpeed);	// 늘어난다.
//	//	
//	//		if ( m_fAlpha > 1.f )
//	//		{
//	//			m_fAlpha = 1.f;
//	//		}
//	//	}
//	//	else
//	//	{
//	//		m_fAlpha = m_fAlpha - (fElapsedTime*fAlphaSpeed);	// 빠진다.
//	//	
//	//		if ( m_fAlpha < 0.f )
//	//		{
//	//			m_fAlpha = 0.f;
//	//		}
//	//	}
//	//}
//
//	//PieceParameter* pPieceParameterNoneConst = m_vecrPiece[0]->GetPieceParameterNoneConst();
//	//pPieceParameterNoneConst->m_fAlpha = m_fAlpha;
//}
//
//void DxPieceInstancing::RenderOpaque_Instancing( LPDIRECT3DDEVICEQ pd3dDevice, const CLIPVOLUME &sCV )
//{
//	if ( m_fAlpha <= 0.f )
//		return;
//
//	if ( !COLLISION::IsCollisionVolume( sCV, m_vMax, m_vMin ) )
//		return;
//
//	if ( !m_rStaticAniFrame->IsTexType(EMTTF_OPAQUE) )
//		return;
//
//	const PieceParameter* pPieceParameter = m_vecrPiece[0]->GetPieceParameter();
//
//	DWORD dwPieceNum = m_vecrPiece.size();
//
//	// Stream zero is our model, and its frequency is how we communicate the number of instances required,
//	// which in this case is the total number of boxes
//	pd3dDevice->SetStreamSourceFreq( 0, D3DSTREAMSOURCE_INDEXEDDATA | dwPieceNum );
//
//	// Stream one is the Instancing buffer, so this advances to the next value
//	// after each box instance has been drawn, so the divider is 1.
//	pd3dDevice->SetStreamSource( 1, g_pInstanceDataVB, 0, sizeof( INSTANCEDATA ) );
//	pd3dDevice->SetStreamSourceFreq( 1, D3DSTREAMSOURCE_INSTANCEDATA | 1ul );
//
//	m_rStaticAniFrame->RenderOpaque_Instancing( *pPieceParameter );
//}
//
//void DxPieceInstancing::RenderHardAlpha_Instancing( LPDIRECT3DDEVICEQ pd3dDevice, const CLIPVOLUME &sCV )
//{
//	if ( m_fAlpha <= 0.f )
//		return;
//
//	if ( !COLLISION::IsCollisionVolume( sCV, m_vMax, m_vMin ) )
//		return;
//
//	if ( !m_rStaticAniFrame->IsTexType(EMTTF_ALPHA_HARD) )
//		return;
//
//	const PieceParameter* pPieceParameter = m_vecrPiece[0]->GetPieceParameter();
//
//	DWORD dwPieceNum = m_vecrPiece.size();
//
//	// Stream zero is our model, and its frequency is how we communicate the number of instances required,
//	// which in this case is the total number of boxes
//	pd3dDevice->SetStreamSourceFreq( 0, D3DSTREAMSOURCE_INDEXEDDATA | dwPieceNum );
//
//	// Stream one is the Instancing buffer, so this advances to the next value
//	// after each box instance has been drawn, so the divider is 1.
//	pd3dDevice->SetStreamSource( 1, g_pInstanceDataVB, 0, sizeof( INSTANCEDATA ) );
//	pd3dDevice->SetStreamSourceFreq( 1, D3DSTREAMSOURCE_INSTANCEDATA | 1ul );
//
//	m_rStaticAniFrame->RenderHardAlpha_Instancing( *pPieceParameter );
//}
//
//void DxPieceInstancing::RenderEffFrame_Instancing( LPDIRECT3DDEVICEQ pd3dDevice, const CLIPVOLUME &sCV, BOOL bLBuffer )
//{
//	if ( m_fAlpha <= 0.f )
//		return;
//
//	if ( !COLLISION::IsCollisionVolume( sCV, m_vMax, m_vMin ) )
//		return;
//
//	for ( DWORD i=0; i<m_vecrPiece.size(); ++i )
//	{
//		m_vecrPiece[i]->RenderEffFrameForDeffered( &sCV, bLBuffer );
//	}
//}
//
//void DxPieceInstancing::RenderDecal_Instancing( LPDIRECT3DDEVICEQ pd3dDevice, const CLIPVOLUME &sCV )
//{
//	if ( m_fAlpha <= 0.f )
//		return;
//
//	if ( !COLLISION::IsCollisionVolume( sCV, m_vMax, m_vMin ) )
//		return;
//
//	if ( !m_rStaticAniFrame->IsTexType(EMTTF_DECAL_BEFORE) )
//		return;
//
//	const PieceParameter* pPieceParameter = m_vecrPiece[0]->GetPieceParameter();
//
//	DWORD dwPieceNum = m_vecrPiece.size();
//
//	// Stream zero is our model, and its frequency is how we communicate the number of instances required,
//	// which in this case is the total number of boxes
//	pd3dDevice->SetStreamSourceFreq( 0, D3DSTREAMSOURCE_INDEXEDDATA | dwPieceNum );
//
//	// Stream one is the Instancing buffer, so this advances to the next value
//	// after each box instance has been drawn, so the divider is 1.
//	pd3dDevice->SetStreamSource( 1, g_pInstanceDataVB, 0, sizeof( INSTANCEDATA ) );
//	pd3dDevice->SetStreamSourceFreq( 1, D3DSTREAMSOURCE_INSTANCEDATA | 1ul );
//
//	m_rStaticAniFrame->RenderDecal_Instancing( *pPieceParameter );
//}
//
//void DxPieceInstancing::RenderDecalPass2_Instancing( LPDIRECT3DDEVICEQ pd3dDevice, const CLIPVOLUME &sCV )
//{
//	if ( m_fAlpha <= 0.f )
//		return;
//
//	if ( !COLLISION::IsCollisionVolume( sCV, m_vMax, m_vMin ) )
//		return;
//
//	if ( !m_rStaticAniFrame->IsTexType(EMTTF_DECAL_AFTER) )
//		return;
//
//	const PieceParameter* pPieceParameter = m_vecrPiece[0]->GetPieceParameter();
//
//	DWORD dwPieceNum = m_vecrPiece.size();
//
//	// Stream zero is our model, and its frequency is how we communicate the number of instances required,
//	// which in this case is the total number of boxes
//	pd3dDevice->SetStreamSourceFreq( 0, D3DSTREAMSOURCE_INDEXEDDATA | dwPieceNum );
//
//	// Stream one is the Instancing buffer, so this advances to the next value
//	// after each box instance has been drawn, so the divider is 1.
//	pd3dDevice->SetStreamSource( 1, g_pInstanceDataVB, 0, sizeof( INSTANCEDATA ) );
//	pd3dDevice->SetStreamSourceFreq( 1, D3DSTREAMSOURCE_INSTANCEDATA | 1ul );
//
//	m_rStaticAniFrame->RenderDecalPass2_Instancing( *pPieceParameter );
//}
//
//void DxPieceInstancing::RenderWaterCustomSoftAlpha_Instancing( LPDIRECT3DDEVICEQ pd3dDevice, const CLIPVOLUME &sCV )
//{
//	if ( m_fAlpha <= 0.f )
//		return;
//
//	if ( !COLLISION::IsCollisionVolume( sCV, m_vMax, m_vMin ) )
//		return;
//
//	for ( DWORD i=0; i<m_vecrPiece.size(); ++i )
//	{
//		m_vecrPiece[i]->Render_PIECE_Water_CustomSoftAlpha();
//	}
//}
//
//void DxPieceInstancing::RenderEff_Instancing( LPDIRECT3DDEVICEQ pd3dDevice, const CLIPVOLUME &sCV, DxStaticMeshLightMap* pStaticMeshLightMap )
//{
//	if ( m_fAlpha <= 0.f )
//		return;
//
//	if ( !COLLISION::IsCollisionVolume( sCV, m_vMax, m_vMin ) )
//		return;
//
//	for ( DWORD i=0; i<m_vecrPiece.size(); ++i )
//	{
//		m_vecrPiece[i]->RenderEff_Instancing( pd3dDevice, &sCV, pStaticMeshLightMap );
//	}
//}