#pragma once

// 인벤토리 게임머니 변화 원인이 새로 생긴 경우 아래에 추가한다. 중간에 삽입하면 안됨;
// SUBTRACT_INVEN_MONEY_CONSIGMENT_SALE_ITEM_BUY 이 바뀌는 경우에는 관련 코드를 체크하자;
// LogMoneyNotifyFlag Table 에도 삽입해주자;
enum EMGAME_MONEY_CHANGE
{
	INVEN_MONEY_DEFAULT, // default
	SUBTRACT_INVEN_MONEY_TRADE, 
	SUBTRACT_INVEN_MONEY_CLUB_CREATE, 
	SUBTRACT_INVEN_MONEY_CLUB_STORAGE_SAVE, 
	SUBTRACT_INVEN_MONEY_ITEM_BUY_NPC, 
	SUBTRACT_INVEN_MONEY_ITEM_REBUY_NPC, 
	SUBTRACT_INVEN_MONEY_DROP_GROUND, 
	SUBTRACT_INVEN_MONEY_ITEM_REBUILD, 
	SUBTRACT_INVEN_MONEY_ITEM_GARBAGE, 
	SUBTRACT_INVEN_MONEY_ITEM_MIX, 
	SUBTRACT_INVEN_MONEY_EXP_RECOVERY_NPC, 
	SUBTRACT_INVEN_MONEY_EXP_RECOVERY_SPECIAL_REBIRTH, 
	SUBTRACT_INVEN_MONEY_ITEM_BUY_PRIVATE_MARKET_DIRECT, 
	SUBTRACT_INVEN_MONEY_ITEM_BUY_PRIVATE_MARKET_SEARCH, 
	SUBTRACT_INVEN_MONEY_QUEST_START, 
	SUBTRACT_INVEN_MONEY_SKILL_LEARN, 
	SUBTRACT_INVEN_MONEY_USER_STORAGE_SAVE, 
	SUBTRACT_INVEN_MONEY_AREA_CHAT_COST, 
	SUBTRACT_INVEN_MONEY_PARTY_RECRUIT_CHAT_COST, 
	SUBTRACT_INVEN_MONEY_CLUB_RANK, 
	SUBTRACT_INVEN_MONEY_TAXI,
	SUBTRACT_INVEN_MONEY_ITEM_DECOMPOSE, 
	SUBTRACT_INVEN_MONEY_ITEM_REPAIR, 
	SUBTRACT_INVEN_MONEY_POST_CHARGE, 
	SUBTRACT_INVEN_MONEY_POST_FEE_AND_ATTACHED_MONEY, 
	SUBTRACT_INVEN_MONEY_POST_ATTACHED_MONEY, 
	SUBTRACT_INVEN_MONEY_LOTTO_BUY, 
	SUBTRACT_INVEN_MONEY_MATCHING_BETTING_COST, 
	SUBTRACT_INVEN_MONEY_MATCHING_FEE, 
	SUBTRACT_INVEN_MONEY_ODDEVEN_COST, 
	SUBTRACT_INVEN_MONEY_TEXASHOLDEM_CHIP_BUY, 
	SUBTRACT_INVEN_MONEY_INSTANCE_DUNGEON_RETRY_COST, 
	SUBTRACT_INVEN_MONEY_CONSIGMENT_SALE_REGISTRATION, 
	SUBTRACT_INVEN_MONEY_CONSIGMENT_SALE_ITEM_BUY, 
	ADD_INVEN_MONEY_TRADE, 
	ADD_INVEN_MONEY_CLUB_STORAGE_SAVE_ROLLBACK, 
	ADD_INVEN_MONEY_CLUB_STORAGE_DRAW, 
	ADD_INVEN_MONEY_PARTY_MONEY_DISTRIBUTION, 
	ADD_INVEN_MONEY_GROUND_MONEY_PICK_UP, 
	ADD_INVEN_MONEY_ITEM_SELL_TO_NPC, 
	ADD_INVEN_MONEY_IVEN_VIETNAM_GET, 
	ADD_INVEN_MONEY_PARTY_RECRUIT_CHAT_COST_BACK, 
	ADD_INVEN_MONEY_ITEM_SELL_TO_PRIVATE_MARKET_DIRECT, 
	ADD_INVEN_MONEY_ITEM_SELL_TO_PRIVATE_MARKET_SEARCH, 
	ADD_INVEN_MONEY_QUEST_REWARD, 
	ADD_INVEN_MONEY_USER_STORAGE_DRAW, 
	ADD_INVEN_MONEY_SHOWMETHEMONEY, 
	ADD_INVEN_MONEY_SHOWMETHEMONEY_EMUL, 
	ADD_INVEN_MONEY_POST_ATTACHED_MONEY, 
	ADD_INVEN_MONEY_POST_CHARGE_ROLLBACK, 
	ADD_INVEN_MONEY_LOTTO_WIN, 
	ADD_INVEN_MONEY_MATCHING_BETTING_RESTORE, 
	ADD_INVEN_MONEY_MATCHING_BETTING_INCOME, 
	ADD_INVEN_MONEY_INSTANCE_DUNGEON_REWARD,
	ADD_INVEN_MONEY_LOTTO_BUY_RESTORE,

	SUBTRACT_INVEN_MONEY_RANMOBILE_CONNECTION, 
	SUBTRACT_INVEN_MONEY_RANMOBILE_EXTENDTIME, 

	ADD_INVEN_MONEY_CONSIGMENT_SALE_ITEM_BUY_ERROR,

	ADD_INVEN_MONEY_SKILL_RESET, 

	GAME_MONEY_CHANGE_MAX
};

namespace Money
{

	struct SMAP_MONEY_LOG
	{
		LONGLONG	llMoney[ GAME_MONEY_CHANGE_MAX ];
		int			nMapID;

		SMAP_MONEY_LOG ( )
			: nMapID ( 0 )
		{
			ZeroMemory( llMoney, sizeof( llMoney ) );
		}

		SMAP_MONEY_LOG ( const SMAP_MONEY_LOG& _rhs )
		{
			for ( int i=0; i<GAME_MONEY_CHANGE_MAX; ++i )
			{
				llMoney[ i ] = _rhs.llMoney[ i ];
			}
			nMapID = _rhs.nMapID;
		}

		inline const SMAP_MONEY_LOG& operator= ( const SMAP_MONEY_LOG& _rhs )
		{
			for ( int i=0; i<GAME_MONEY_CHANGE_MAX; ++i )
			{
				llMoney[ i ] = _rhs.llMoney[ i ];
			}
			nMapID = _rhs.nMapID;

			return *this;
		}
	};

	typedef std::vector< SMAP_MONEY_LOG >		VEC_MAP_MONEY_LOG;
	typedef VEC_MAP_MONEY_LOG::iterator			VEC_MAP_MONEY_LOG_ITER;

}