#include "stdafx.h"
#include "../../../SigmaCore/String/StringUtils.h"

#include "../../../SigmaCore/File/SerialFile.h"
#include "../../G-Logic/GLogic.h"

#include "DxBoneCollector.h"
#include "../../DxEffect/EffAni/DxEffAni.h"

#include "DxSkinAnimationManager.h"

#include "../../Common/StlFunctions.h"

#include "../../DxCommon/dsutil.h"
#include "../../DxTools/DxViewPort.h"
#include "../../DxSound/DxSoundMan.h"
#include "DxAniBoneScale.h"

// ----------------------------------------------------------------------------
#include "../../../SigmaCore/DebugInclude.h"
// ----------------------------------------------------------------------------

BOOL SANIMCONINFO::LoadFile_0101 ( sc::BaseStream &SFile, LPDIRECT3DDEVICEQ pd3dDevice )
{
	SANIMCONINFO_101 OldAnimInfo;
	SFile.ReadBuffer ( &OldAnimInfo, sizeof(OldAnimInfo) );
	
    char szName[ACF_SZNAME] = {0};
	StringCchCopy(szName, ACF_SZNAME, OldAnimInfo.m_szName);
    m_Name = szName;

    char szSkeletonName[ACF_SZNAME] = {0};
	StringCchCopy(szSkeletonName, ACF_SZNAME, OldAnimInfo.m_szSkeletion );
    m_SkeletionName = szSkeletonName;

    m_dwFlag = OldAnimInfo.m_dwFlag;
	m_dwSTime = OldAnimInfo.m_dwSTime;
	m_dwETime = OldAnimInfo.m_dwETime;
	m_dwETimeOrig = OldAnimInfo.m_dwETimeOrig;
	m_UNITTIME = OldAnimInfo.m_UNITTIME;

	m_MainType = OldAnimInfo.m_MainType;
	m_SubType = OldAnimInfo.m_SubType;

	m_wDivCount = OldAnimInfo.m_wDivCount;
	memcpy ( m_wDivFrame, OldAnimInfo.m_wDivFrame, sizeof(WORD)*ACF_DIV );		

	return TRUE;
}

BOOL SANIMCONINFO::LoadFile_0102 ( sc::BaseStream &SFile, LPDIRECT3DDEVICEQ pd3dDevice )
{
	SANIMCONINFO_102 OldAnimInfo;
	SFile.ReadBuffer ( &OldAnimInfo, sizeof(OldAnimInfo) );
	
    char szName[ACF_SZNAME] = {0};
	StringCchCopy( szName, ACF_SZNAME, OldAnimInfo.m_szName );
    m_Name = szName;

    char szSkeletonName[ACF_SZNAME] = {0};
	StringCchCopy(szSkeletonName, ACF_SZNAME, OldAnimInfo.m_szSkeletion);
    m_SkeletionName = szSkeletonName;

    m_dwFlag = OldAnimInfo.m_dwFlag;
	m_dwSTime = OldAnimInfo.m_dwSTime;
	m_dwETime = OldAnimInfo.m_dwETime;
	m_dwETimeOrig = OldAnimInfo.m_dwETimeOrig;
	m_UNITTIME = OldAnimInfo.m_UNITTIME;

	m_MainType = OldAnimInfo.m_MainType;
	m_SubType = OldAnimInfo.m_SubType;

	m_wDivCount = OldAnimInfo.m_wDivCount;
	memcpy ( m_wDivFrame, OldAnimInfo.m_wDivFrame, sizeof(WORD)*ACF_DIV );

	m_ChaSoundData = OldAnimInfo.m_ChaSoundData;

	return TRUE;
}

BOOL SANIMCONINFO::LoadFile_0103 ( sc::BaseStream &SFile, LPDIRECT3DDEVICEQ pd3dDevice )
{
	SANIMCONINFO_103 OldAnimInfo;
	SFile.ReadBuffer ( &OldAnimInfo, sizeof(OldAnimInfo) );

    char szName[ACF_SZNAME] = {0};
	StringCchCopy(szName, ACF_SZNAME, OldAnimInfo.m_szName );
    m_Name = szName;

    char szSkeletonName[ACF_SZNAME] = {0};
	StringCchCopy(szSkeletonName, ACF_SZNAME, OldAnimInfo.m_szSkeletion );
    m_SkeletionName = szSkeletonName;

	m_dwFlag = OldAnimInfo.m_dwFlag;
	m_dwSTime = OldAnimInfo.m_dwSTime;
	m_dwETime = OldAnimInfo.m_dwETime;
	m_dwETimeOrig = OldAnimInfo.m_dwETimeOrig;
	m_UNITTIME = OldAnimInfo.m_UNITTIME;

	m_MainType = OldAnimInfo.m_MainType;
	m_SubType = OldAnimInfo.m_SubType;

	m_wDivCount = OldAnimInfo.m_wDivCount;
	memcpy ( m_wDivFrame, OldAnimInfo.m_wDivFrame, sizeof(WORD)*ACF_DIV );

	m_wStrikeCount = 0;

	m_ChaSoundData = OldAnimInfo.m_ChaSoundData;

	return TRUE;
}

BOOL SANIMCONINFO::LoadFile_0104 ( sc::BaseStream &SFile, LPDIRECT3DDEVICEQ pd3dDevice )
{
	SANIMCONINFO_104 OldAnimInfo;
	SFile.ReadBuffer ( &OldAnimInfo, sizeof(SANIMCONINFO_104) );

    char szName[ACF_SZNAME] = {0};
	StringCchCopy( szName, ACF_SZNAME, OldAnimInfo.m_szName );
    m_Name = szName;

    char szSkeletonName[ACF_SZNAME] = {0};
	StringCchCopy(szSkeletonName, ACF_SZNAME, OldAnimInfo.m_szSkeletion);
    m_SkeletionName = szSkeletonName;

	m_dwFlag = OldAnimInfo.m_dwFlag;
	m_dwSTime = OldAnimInfo.m_dwSTime;
	m_dwETime = OldAnimInfo.m_dwETime;
	m_dwETimeOrig = OldAnimInfo.m_dwETimeOrig;
	m_UNITTIME = OldAnimInfo.m_UNITTIME;

	m_MainType = OldAnimInfo.m_MainType;
	m_SubType = OldAnimInfo.m_SubType;

	m_wDivCount = OldAnimInfo.m_wDivCount;
	memcpy ( m_wDivFrame, OldAnimInfo.m_wDivFrame, sizeof(WORD)*ACF_DIV );

	m_wStrikeCount = OldAnimInfo.m_wStrikeCount;
	memcpy ( m_sStrikeEff, OldAnimInfo.m_sStrikeEff, sizeof(SANIMSTRIKE)*ACF_STRIKE );

	m_ChaSoundData = OldAnimInfo.m_ChaSoundData;

	return TRUE;
}

BOOL SANIMCONINFO::LoadFile_0105 ( sc::BaseStream &SFile, LPDIRECT3DDEVICEQ pd3dDevice )
{
	//SFile.ReadBuffer ( this, sizeof(SANIMCONINFO) );
    char szName[ACF_SZNAME] = {0};
	SFile.ReadBuffer(szName, sizeof(char)*ACF_SZNAME);
    m_Name = szName;

    char szSkeletonName[ACF_SZNAME] = {0};
	SFile.ReadBuffer(szSkeletonName, sizeof(char)*ACF_SZNAME);
    m_SkeletionName = szSkeletonName;

	SFile >> m_dwFlag;
	SFile >> m_dwSTime;
	SFile >> m_dwETime;
	SFile >> m_dwETimeOrig;
	SFile >> m_UNITTIME;

	DWORD	dwType;
	SFile >> dwType;
	m_MainType = (EMANI_MAINTYPE)dwType;
	SFile >> dwType;
	m_SubType = (EMANI_SUBTYPE)dwType;

	SFile >> m_wDivCount;
	SFile.ReadBuffer ( m_wDivFrame, sizeof(WORD)*ACF_DIV );

	SFile >> m_wStrikeCount;
	SFile.ReadBuffer ( m_sStrikeEff, sizeof(SANIMSTRIKE)*ACF_STRIKE );

	SChaSoundData_103 ChaSoundData;
	SFile.ReadBuffer ( &ChaSoundData, sizeof(SChaSoundData_103) );
	m_ChaSoundData = ChaSoundData;		

	DWORD	dwSize;
	SFile >> dwSize;
	for ( DWORD i=0; i<dwSize; ++i )
	{
		DWORD	dwType;
		SFile >> dwType;
		DxEffAniData*	pEff = DxEffAniMan::GetInstance().CreateEffInstance ( dwType );
		if ( pEff )
		{
			pEff->LoadFile ( SFile, pd3dDevice );
			m_listEffAni.push_back ( pEff );
		}
	}

	return TRUE;
}

BOOL SANIMCONINFO::LoadFile_0106 ( sc::BaseStream &SFile, LPDIRECT3DDEVICEQ pd3dDevice )
{
    char szName[ACF_SZNAME] = {0};
	SFile.ReadBuffer(szName, sizeof(char)*ACF_SZNAME);
    m_Name = szName;

    char szSkeletonName[ACF_SZNAME] = {0};
	SFile.ReadBuffer(szSkeletonName, sizeof(char)*ACF_SZNAME);
    m_SkeletionName = szSkeletonName;

	SFile >> m_dwFlag;
	SFile >> m_dwSTime;
	SFile >> m_dwETime;
	SFile >> m_dwETimeOrig;
	SFile >> m_UNITTIME;

	DWORD	dwType;
	SFile >> dwType;
	m_MainType = (EMANI_MAINTYPE)dwType;
	SFile >> dwType;
	m_SubType = (EMANI_SUBTYPE)dwType;

	SFile >> m_wDivCount;
	SFile.ReadBuffer ( m_wDivFrame, sizeof(WORD)*ACF_DIV );

	SFile >> m_wStrikeCount;
	SFile.ReadBuffer ( m_sStrikeEff, sizeof(SANIMSTRIKE)*ACF_STRIKE );

	SFile.ReadBuffer ( &m_ChaSoundData, sizeof(SChaSoundData) );

	DWORD	dwSize;
	SFile >> dwSize;
	for ( DWORD i=0; i<dwSize; ++i )
	{
		DWORD	dwType;
		SFile >> dwType;
		DxEffAniData*	pEff = DxEffAniMan::GetInstance().CreateEffInstance ( dwType );
		if ( pEff )
		{
			pEff->LoadFile ( SFile, pd3dDevice );
			m_listEffAni.push_back ( pEff );
		}
	}

	return TRUE;
}

BOOL SANIMCONINFO::LoadFile_0107 ( sc::BaseStream &SFile, LPDIRECT3DDEVICEQ pd3dDevice )
{
	//SFile.ReadBuffer ( this, sizeof(SANIMCONINFO) );
    char szName[ACF_SZNAME] = {0};
	SFile.ReadBuffer(szName, sizeof(char)*ACF_SZNAME);
    m_Name = szName;

    char szSkeletonName[ACF_SZNAME] = {0};
	SFile.ReadBuffer(szSkeletonName, sizeof(char)*ACF_SZNAME);
    m_SkeletionName = szSkeletonName;

	SFile >> m_dwFlag;
	SFile >> m_dwSTime;
	SFile >> m_dwETime;
	SFile >> m_dwETimeOrig;
	SFile >> m_UNITTIME;

	DWORD	dwType;
	SFile >> dwType;
	m_MainType = (EMANI_MAINTYPE)dwType;
	SFile >> dwType;
	m_SubType = (EMANI_SUBTYPE)dwType;

	SFile >> m_wDivCount;
	SFile.ReadBuffer ( m_wDivFrame, sizeof(WORD)*ACF_DIV );

	SFile >> m_wStrikeCount;
	SFile.ReadBuffer ( m_sStrikeEff, sizeof(SANIMSTRIKE)*ACF_STRIKE );

	SFile.ReadBuffer ( &m_ChaSoundData, sizeof(SChaSoundData) );

	DWORD	dwSize;
	SFile >> dwSize;
	for ( DWORD i=0; i<dwSize; ++i )
	{
		DWORD	dwType;
		SFile >> dwType;
		DxEffAniData*	pEff = DxEffAniMan::GetInstance().CreateEffInstance ( dwType );
		if ( pEff )
		{
			pEff->LoadFile ( SFile, pd3dDevice );
			m_listEffAni.push_back ( pEff );
		}
	}

	m_pAniScale->Load( SFile );

	return TRUE;
}

BOOL SANIMCONINFO::LoadFile_0108 ( sc::BaseStream &SFile, LPDIRECT3DDEVICEQ pd3dDevice )
{
	//SFile.ReadBuffer ( this, sizeof(SANIMCONINFO) );
    char szName[ACF_SZNAME] = {0};
	SFile.ReadBuffer(szName, sizeof(char)*ACF_SZNAME);
    m_Name = szName;

    char szSkeletonName[ACF_SZNAME] = {0};
	SFile.ReadBuffer(szSkeletonName, sizeof(char)*ACF_SZNAME);
    m_SkeletionName = szSkeletonName;

	SFile >> m_dwFlag;
	SFile >> m_UNITTIME;
	SFile >> m_dwSTime;
	SFile >> m_dwETime;
	SFile >> m_dwETimeOrig;


	DWORD	dwType;
	SFile >> dwType;
	m_MainType = (EMANI_MAINTYPE)dwType;
	SFile >> dwType;
	m_SubType = (EMANI_SUBTYPE)dwType;

	SFile >> m_wStrikeCount;
	SFile.ReadBuffer ( m_sStrikeEff, sizeof(SANIMSTRIKE)*ACF_STRIKE );

	SFile >> m_wDivCount;
	SFile.ReadBuffer ( m_wDivFrame, sizeof(WORD)*ACF_DIV );

	DWORD	dwSize;
	SFile >> dwSize;
	for ( DWORD i=0; i<dwSize; ++i )
	{
		DWORD	dwType;
		SFile >> dwType;
		DxEffAniData*	pEff = DxEffAniMan::GetInstance().CreateEffInstance ( dwType );
		if ( pEff )
		{
			pEff->LoadFile ( SFile, pd3dDevice );
			m_listEffAni.push_back ( pEff );
		}
	}

	m_pAniScale->Load( SFile );

	SFile.ReadBuffer ( &m_ChaSoundData, sizeof(SChaSoundData) );

	return TRUE;
}


BOOL SANIMCONINFO::LoadFile_0109 ( sc::BaseStream &SFile, LPDIRECT3DDEVICEQ pd3dDevice )
{
	//SFile.ReadBuffer ( this, sizeof(SANIMCONINFO) );
    char szName[ACF_SZNAME] = {0};
	SFile.ReadBuffer(szName, sizeof(char)*ACF_SZNAME);
    m_Name = szName;

    char szSkeletonName[ACF_SZNAME] = {0};
	SFile.ReadBuffer(szSkeletonName, sizeof(char)*ACF_SZNAME);
    m_SkeletionName = szSkeletonName;

	SFile >> m_dwFlag;
	SFile >> m_UNITTIME;
	SFile >> m_dwSTime;
	SFile >> m_dwETime;
	SFile >> m_dwETimeOrig;


	DWORD	dwType;
	SFile >> dwType;
	m_MainType = (EMANI_MAINTYPE)dwType;
	SFile >> dwType;
	m_SubType = (EMANI_SUBTYPE)dwType;

	SFile >> m_wStrikeCount;
	SFile.ReadBuffer ( m_sStrikeEff, sizeof(SANIMSTRIKE)*ACF_STRIKE );

	SFile >> m_wDivCount;
	SFile.ReadBuffer ( m_wDivFrame, sizeof(WORD)*ACF_DIV );

	DWORD	dwSize;
	SFile >> dwSize;
	for ( DWORD i=0; i<dwSize; ++i )
	{
		DWORD	dwType;
		SFile >> dwType;
		DxEffAniData*	pEff = DxEffAniMan::GetInstance().CreateEffInstance ( dwType );
		if ( pEff )
		{
			pEff->LoadFile ( SFile, pd3dDevice );
			m_listEffAni.push_back ( pEff );
		}
	}

	m_pAniScale->Load( SFile );

	SFile.ReadBuffer ( &m_ChaSoundData, sizeof(SChaSoundData) );

	for( DWORD i = 0; i < PIECE_SAVE_SIZE; i++ )
	{
		m_sAttBoneAnimInfo[i].Init();

		SFile >> m_sAttBoneAnimInfo[i].sBasicAni.nStartAnim;
		SFile >> dwSize;
		m_sAttBoneAnimInfo[i].sBasicAni.emAttAniType = (EMANI_MAINTYPE)dwSize;

	}

	return TRUE;
}




BOOL SANIMCONINFO::LoadFile_0110 ( sc::BaseStream &SFile, LPDIRECT3DDEVICEQ pd3dDevice )
{
	//SFile.ReadBuffer ( this, sizeof(SANIMCONINFO) );
    char szName[ACF_SZNAME] = {0};
	SFile.ReadBuffer(szName, sizeof(char)*ACF_SZNAME);
    m_Name = szName;

    char szSkeletonName[ACF_SZNAME] = {0};
	SFile.ReadBuffer(szSkeletonName, sizeof(char)*ACF_SZNAME);
    m_SkeletionName = szSkeletonName;

	SFile >> m_dwFlag;
	SFile >> m_UNITTIME;
	SFile >> m_dwSTime;
	SFile >> m_dwETime;
	SFile >> m_dwETimeOrig;


	DWORD	dwType;
	SFile >> dwType;
	m_MainType = (EMANI_MAINTYPE)dwType;
	SFile >> dwType;
	m_SubType = (EMANI_SUBTYPE)dwType;

	SFile >> m_wStrikeCount;
	SFile.ReadBuffer ( m_sStrikeEff, sizeof(SANIMSTRIKE)*ACF_STRIKE );

	SFile >> m_wDivCount;
	SFile.ReadBuffer ( m_wDivFrame, sizeof(WORD)*ACF_DIV );

	DWORD	dwSize;
	SFile >> dwSize;
	for ( DWORD i=0; i<dwSize; ++i )
	{
		DWORD	dwType;
		SFile >> dwType;
		DxEffAniData*	pEff = DxEffAniMan::GetInstance().CreateEffInstance ( dwType );
		if ( pEff )
		{
			pEff->LoadFile ( SFile, pd3dDevice );
			m_listEffAni.push_back ( pEff );
		}
	}

	m_pAniScale->Load( SFile );

	SFile.ReadBuffer ( &m_ChaSoundData, sizeof(SChaSoundData) );

	for( DWORD i = 0; i < PIECE_SAVE_SIZE; i++ )
	{
		m_sAttBoneAnimInfo[i].Init();

		SFile >> m_sAttBoneAnimInfo[i].bUseStrikeAni;

		if( !m_sAttBoneAnimInfo[i].bUseStrikeAni )
		{	
			SFile >> m_sAttBoneAnimInfo[i].sBasicAni.nStartAnim;
			SFile >> dwType;
			m_sAttBoneAnimInfo[i].sBasicAni.emAttAniType = (EMANI_MAINTYPE)dwType;
		}else{
			SAttachBoneAnimBasicInfo sTempBasicAni;

			for( DWORD j = 0; j < m_wStrikeCount; j++ )
			{
				SFile >>  sTempBasicAni.nStartAnim;
				SFile >> dwType;
				sTempBasicAni.emAttAniType = (EMANI_MAINTYPE)dwType;
				m_sAttBoneAnimInfo[i].vecStrikeAni.push_back(sTempBasicAni);
			}
		}
	}

	return TRUE;
}


BOOL SANIMCONINFO::LoadFile(const std::string& FileName, LPDIRECT3DDEVICEQ pd3dDevice)
{
	CleanUp();

    std::string FilePath(DxSkinAnimationManager::GetInstance().GetPath());
	FilePath.append(FileName);

	std::auto_ptr<sc::BaseStream> pBStream(
        GLOGIC::openfile_basestream(
            GLOGIC::UseEngineZipFile(), 
            GLOGIC::strANIMATION_ZIPFILE,
            FilePath.c_str(), 
            FileName));

	if (!pBStream.get())
		return FALSE;

	sc::BaseStream& SFile = *pBStream;

	char szFileType[FILETYPESIZE] = {0};
	DWORD dwVersion;
	SFile.GetFileType( szFileType, FILETYPESIZE, dwVersion );

	switch (dwVersion)
	{
	case 0x0101:	LoadFile_0101( SFile, pd3dDevice );	break;
	case 0x0102:	LoadFile_0102( SFile, pd3dDevice );	break;
	case 0x0103:	LoadFile_0103( SFile, pd3dDevice );	break;
	case 0x0104:	LoadFile_0104( SFile, pd3dDevice );	break;
	case 0x0105:	LoadFile_0105( SFile, pd3dDevice );	break;
	case 0x0106:	LoadFile_0106( SFile, pd3dDevice );	break;
	case 0x0107:	LoadFile_0107( SFile, pd3dDevice );	break;
	case 0x0108:	LoadFile_0108( SFile, pd3dDevice );	break;
	case 0x0109:	LoadFile_0109( SFile, pd3dDevice );	break;
	case VERSION:	LoadFile_0110( SFile, pd3dDevice );	break;		
	default:
		{
			MessageBox(NULL, "SANIMCONINFO::LoadFile() unknown file version.", FileName.c_str(), MB_OK);
		}
		break;
	};

	m_dwFlag = m_dwFlag & ~ACF_NEWINFO;

	return TRUE;
}

BOOL SANIMCONINFO::SaveFile ( const char *szFileName )
{
	char szFilePath[MAX_PATH] = "";
	StringCchCopy( szFilePath, MAX_PATH, DxSkinAnimationManager::GetInstance().GetPath() );
	StringCchCat( szFilePath, MAX_PATH, szFileName );

	sc::SerialFile SFile;
	SFile.SetFileType ( "SANIMCONINFO", SANIMCONINFO::VERSION );
	if ( !SFile.OpenFile ( FOT_WRITE, szFilePath ) )	return FALSE;

	//SFile.WriteBuffer ( this, sizeof(SANIMCONINFO) );

    char szName[ACF_SZNAME] = {0};
    StringCchCopy(szName, ACF_SZNAME, m_Name.c_str());
	SFile.WriteBuffer(szName, sizeof(char)*ACF_SZNAME);

    char szSkeletion[ACF_SZNAME] = {0};
    StringCchCopy(szSkeletion, ACF_SZNAME, m_SkeletionName.c_str());    
	SFile.WriteBuffer(szSkeletion, sizeof(char)*ACF_SZNAME);

	SFile << m_dwFlag;
	SFile << m_UNITTIME;
	SFile << m_dwSTime;
	SFile << m_dwETime;
	SFile << m_dwETimeOrig;


	SFile << m_MainType;
	SFile << m_SubType;

	SFile << m_wStrikeCount;
	SFile.WriteBuffer ( m_sStrikeEff, sizeof(SANIMSTRIKE)*ACF_STRIKE );

	SFile << m_wDivCount;
	SFile.WriteBuffer ( m_wDivFrame, sizeof(WORD)*ACF_DIV );

	SFile << (DWORD) m_listEffAni.size();
	EFFANILIST_ITER iter = m_listEffAni.begin();
	EFFANILIST_ITER iter_end = m_listEffAni.end();
	for ( ; iter!=iter_end; ++iter )
	{
		SFile << (DWORD) (*iter)->GetTypeID();
		(*iter)->SaveFile ( SFile );
	}

	m_pAniScale->Save( SFile );

	SFile.WriteBuffer ( &m_ChaSoundData, sizeof(SChaSoundData) );

	DWORD dwType;
	for( DWORD i = 0; i < PIECE_SAVE_SIZE; i++ )
	{
		SFile << m_sAttBoneAnimInfo[i].bUseStrikeAni;
		if( !m_sAttBoneAnimInfo[i].bUseStrikeAni )
		{	
			SFile << m_sAttBoneAnimInfo[i].sBasicAni.nStartAnim;
			dwType = (DWORD)m_sAttBoneAnimInfo[i].sBasicAni.emAttAniType;
			SFile << dwType;
			
		}else{
			for( DWORD j = 0; j < m_wStrikeCount; j++ )
			{
				SFile << m_sAttBoneAnimInfo[i].vecStrikeAni[j].nStartAnim;
				dwType = (DWORD)m_sAttBoneAnimInfo[i].vecStrikeAni[j].emAttAniType;
				SFile << dwType;
			}
		}
	}


	return TRUE;
}



