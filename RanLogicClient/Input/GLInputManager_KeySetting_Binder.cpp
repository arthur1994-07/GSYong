#include "../pch.h"

#include "../../SigmaCore/String/StringFormat.h"
#include "../../SigmaCore/Log/LogMan.h"
#include "../../SigmaCore/gassert.h"

#include "../../EngineLib/DxTools/DxInputDevice.h"

#include "./GLInputManager_KeySetting.h"

// ----------------------------------------------------------------------------
#include "../../SigmaCore/DebugInclude.h"
// ----------------------------------------------------------------------------

//! 문자열 <--> 키값 사이의 변환 바인딩
// ----------------------------------------------------------------------------//
SKEYSTRINGBINDER::SKEYSTRINGBINDER()
{
	//! 공백 혹은 중복되는 키가 있어선 안된다, 부득이하게 중복되거나 연산자랑 겹칠경우
	//  OPERATOR_NEGATIVE_OPERATOR 마크로 묶는다 ex. "+"

	KeyToString[SSHORTCUTS::OPERATOR_AND()]				  = "+";
	KeyToString[SSHORTCUTS::OPERATOR_OR()]				  = ",";
	KeyToString[SSHORTCUTS::OPERATOR_BRACKET_OPEN()]	  = "(";
	KeyToString[SSHORTCUTS::OPERATOR_BRACKET_CLOSE()]	  = ")";
	KeyToString[SSHORTCUTS::OPERATOR_NEGATIVE_OPERATOR()] = "\"";

	KeyToString[SSHORTCUTS::KEYBOARD(DIK_ESCAPE)] = "Esc";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_1)] = "1";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_2)] = "2";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_3)] = "3";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_4)] = "4";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_5)] = "5";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_6)] = "6";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_7)] = "7";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_8)] = "8";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_9)] = "9";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_0)] = "0";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_MINUS)] = "-";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_EQUALS)] = "=";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_BACK)] = "BackSpace";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_TAB)] = "Tab";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_Q)] = "Q";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_W)] = "W";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_E)] = "E";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_R)] = "R";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_T)] = "T";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_Y)] = "Y";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_U)] = "U";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_I)] = "I";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_O)] = "O";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_P)] = "P";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_LBRACKET)] = "[";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_RBRACKET)] = "]";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_RETURN)] = "Enter";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_LCONTROL)] = "L-Ctrl";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_A)] = "A";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_S)] = "S";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_D)] = "D";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_F)] = "F";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_G)] = "G";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_H)] = "H";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_J)] = "J";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_K)] = "K";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_L)] = "L";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_SEMICOLON)] = ";";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_APOSTROPHE)] = "'";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_GRAVE)] = "`";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_LSHIFT)] = "L-Shift";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_BACKSLASH)] = "\\";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_Z)] = "Z";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_X)] = "X";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_C)] = "C";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_V)] = "V";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_B)] = "B";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_N)] = "N";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_M)] = "M";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_COMMA)] = "\",\"";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_PERIOD)] = ".";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_SLASH)] = "/";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_RSHIFT)] = "R-Shift";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_MULTIPLY)] = "*";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_LMENU)] = "L-Alt";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_SPACE)] = "Spacebar";	
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_CAPITAL)] = "CapsLock";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_F1)] = "F1";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_F2)] = "F2";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_F3)] = "F3";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_F4)] = "F4";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_F5)] = "F5";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_F6)] = "F6";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_F7)] = "F7";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_F8)] = "F8";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_F9)] = "F9";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_F10)] = "F10";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_NUMLOCK)] = "NumLock";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_SCROLL)] = "Scroll";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_NUMPAD7)] = "Num7";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_NUMPAD8)] = "Num8";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_NUMPAD9)] = "Num9";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_SUBTRACT)] = "\"-\"";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_NUMPAD4)] = "Num4";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_NUMPAD5)] = "Num5";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_NUMPAD6)] = "Num6";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_ADD)] = "\"+\"";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_NUMPAD1)] = "Num1";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_NUMPAD2)] = "Num2";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_NUMPAD3)] = "Num3";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_NUMPAD0)] = "Num0";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_DECIMAL)] = "Num.";//"\".\"";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_F11)] = "F11";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_F12)] = "F12";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_F13)] = "F13";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_F14)] = "F14";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_F15)] = "F15";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_KANA)] = "Kana";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_ABNT_C1)] = "Abnt1";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_CONVERT)] = "Convert";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_NOCONVERT)] = "NoConvert";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_YEN)] = "Yen";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_ABNT_C2)] = "Abnt2";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_KANJI)] = "Kanji";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_DIVIDE)] = "\"/\"";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_SYSRQ)] = "None";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_RMENU)] = "R-Alt";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_PAUSE)] = "Pause";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_HOME)] = "Home";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_UP)] = "UpKey";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_PRIOR)] = "PageUp";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_LEFT)] = "LeftKey";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_RIGHT)] = "RightKey";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_END)] = "End";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_DOWN)] = "DownKey";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_NEXT)] = "PageDown";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_INSERT)] = "Insert";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_DELETE)] = "Delete";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_LWIN)] = "L-Win";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_RWIN)] = "R-Win";
	KeyToString[SSHORTCUTS::KEYBOARD(DIK_APPS)] = "App_Key";

	KeyToString[SSHORTCUTS::MOUSE(DXMOUSE_LEFT)]   = "L-Mouse";
	KeyToString[SSHORTCUTS::MOUSE(DXMOUSE_RIGHT)]  = "R-Mouse";
	KeyToString[SSHORTCUTS::MOUSE(DXMOUSE_MIDDLE)] = "M-Mouse";

	//---------------------//
	StringToKey.clear();
	
	MAP_KEYTOSTRING_ITER iter = KeyToString.begin();
	for ( ; iter != KeyToString.end(); ++iter )
	{
		std::pair<MAP_STRINGTOKEY_ITER, bool> pairRet = StringToKey.insert( std::make_pair(iter->second, iter->first) );
		if ( !pairRet.second )
		{
			std::string strError = sc::string::format( "SKEYSTRINGBINDER::SKEYSTRINGBINDER() - '%1%' string is already exists.", iter->second );
			GASSERT_MSG(pairRet.second, strError);
			sc::writeLogError( strError );
		}
	}
};

//! 기본 단축키 바인드
// ----------------------------------------------------------------------------//
CKeySetting::CKeySetting()
{
	//! 일반 단축키
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_QUICKSLOT0, SSHORTCUTS::KEYBOARD(DIK_Q) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_QUICKSLOT1, SSHORTCUTS::KEYBOARD(DIK_W) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_QUICKSLOT2, SSHORTCUTS::KEYBOARD(DIK_E) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_QUICKSLOT3, SSHORTCUTS::KEYBOARD(DIK_A) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_QUICKSLOT4, SSHORTCUTS::KEYBOARD(DIK_S) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_QUICKSLOT5, SSHORTCUTS::KEYBOARD(DIK_D) );

	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_SKILLSLOT0, SSHORTCUTS::KEYBOARD(DIK_1) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_SKILLSLOT1, SSHORTCUTS::KEYBOARD(DIK_2) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_SKILLSLOT2, SSHORTCUTS::KEYBOARD(DIK_3) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_SKILLSLOT3, SSHORTCUTS::KEYBOARD(DIK_4) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_SKILLSLOT4, SSHORTCUTS::KEYBOARD(DIK_5) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_SKILLSLOT5, SSHORTCUTS::KEYBOARD(DIK_6) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_SKILLSLOT6, SSHORTCUTS::KEYBOARD(DIK_7) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_SKILLSLOT7, SSHORTCUTS::KEYBOARD(DIK_8) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_SKILLSLOT8, SSHORTCUTS::KEYBOARD(DIK_9) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_SKILLSLOT9, SSHORTCUTS::KEYBOARD(DIK_0) );

	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_SKILLTAB0, SSHORTCUTS::KEYBOARD(DIK_F1) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_SKILLTAB1, SSHORTCUTS::KEYBOARD(DIK_F2) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_SKILLTAB2, SSHORTCUTS::KEYBOARD(DIK_F3) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_SKILLTAB3, SSHORTCUTS::KEYBOARD(DIK_F4) );

	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_SKILLTRAYTOGGLE, SSHORTCUTS::KEYBOARD(DIK_GRAVE) );

	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_ARMSSLOTSWAP, SSHORTCUTS::KEYBOARD(DIK_TAB) );

	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_CHATMACRO0, SSHORTCUTS::KEYBOARD(DIK_LMENU) & SSHORTCUTS::KEYBOARD(DIK_1) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_CHATMACRO1, SSHORTCUTS::KEYBOARD(DIK_LMENU) & SSHORTCUTS::KEYBOARD(DIK_2) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_CHATMACRO2, SSHORTCUTS::KEYBOARD(DIK_LMENU) & SSHORTCUTS::KEYBOARD(DIK_3) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_CHATMACRO3, SSHORTCUTS::KEYBOARD(DIK_LMENU) & SSHORTCUTS::KEYBOARD(DIK_4) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_CHATMACRO4, SSHORTCUTS::KEYBOARD(DIK_LMENU) & SSHORTCUTS::KEYBOARD(DIK_5) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_CHATMACRO5, SSHORTCUTS::KEYBOARD(DIK_LMENU) & SSHORTCUTS::KEYBOARD(DIK_6) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_CHATMACRO6, SSHORTCUTS::KEYBOARD(DIK_LMENU) & SSHORTCUTS::KEYBOARD(DIK_7) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_CHATMACRO7, SSHORTCUTS::KEYBOARD(DIK_LMENU) & SSHORTCUTS::KEYBOARD(DIK_8) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_CHATMACRO8, SSHORTCUTS::KEYBOARD(DIK_LMENU) & SSHORTCUTS::KEYBOARD(DIK_9) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_CHATMACRO9, SSHORTCUTS::KEYBOARD(DIK_LMENU) & SSHORTCUTS::KEYBOARD(DIK_0) );

	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_INVENTORY,	SSHORTCUTS::KEYBOARD(DIK_I) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_CHARACTER,	SSHORTCUTS::KEYBOARD(DIK_C) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_SKILL,		SSHORTCUTS::KEYBOARD(DIK_K) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_PARTY,		SSHORTCUTS::KEYBOARD(DIK_P) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_QUEST,		SSHORTCUTS::KEYBOARD(DIK_T) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_CLUB,		SSHORTCUTS::KEYBOARD(DIK_G) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_FRIEND,	SSHORTCUTS::KEYBOARD(DIK_F) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_ITEMBANK,	SSHORTCUTS::KEYBOARD(DIK_B) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_MINIMAP,	SSHORTCUTS::KEYBOARD(DIK_M) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_POINTSHOP,	SSHORTCUTS::KEYBOARD(DIK_BACKSLASH) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_CHATMACRO,	SSHORTCUTS::KEYBOARD(DIK_J) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_SNS,		SSHORTCUTS::KEYBOARD(DIK_SLASH) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_HELP,		SSHORTCUTS::KEYBOARD(DIK_H) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_QBOX,		SSHORTCUTS::KEYBOARD(DIK_O) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_PET,		SSHORTCUTS::KEYBOARD(DIK_L) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_VEHICLE,	SSHORTCUTS::KEYBOARD(DIK_N) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_PRODUCT,	SSHORTCUTS::KEYBOARD(DIK_SEMICOLON) );

	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_SCHOOLRECORD, SSHORTCUTS::KEYBOARD(DIK_Y) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_BATTLEGROUND, SSHORTCUTS::KEYBOARD(DIK_U) );

	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_PICKUPITEM,	SSHORTCUTS::KEYBOARD(DIK_SPACE) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_FOURCEDPKMODE,	SSHORTCUTS::KEYBOARD(DIK_Z) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_RUNMODE,		SSHORTCUTS::KEYBOARD(DIK_R) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_PEACEMODE,		SSHORTCUTS::KEYBOARD(DIK_X) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_VEHICLEACTIVE,	SSHORTCUTS::KEYBOARD(DIK_V) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_VEHICLEBOOST,	SSHORTCUTS::KEYBOARD(DIK_Z) );

	//! 숨김 단축키
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_UP,		 SSHORTCUTS::KEYBOARD(DIK_UP)    | SSHORTCUTS::KEYBOARD(DIK_NUMPAD8) );
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_DOWN,	 SSHORTCUTS::KEYBOARD(DIK_DOWN)  | SSHORTCUTS::KEYBOARD(DIK_NUMPAD2) );
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_LEFT,	 SSHORTCUTS::KEYBOARD(DIK_LEFT)  | SSHORTCUTS::KEYBOARD(DIK_NUMPAD4) );
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_RIGHT,	 SSHORTCUTS::KEYBOARD(DIK_RIGHT) | SSHORTCUTS::KEYBOARD(DIK_NUMPAD6) );
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_ZOOMIN,	 SSHORTCUTS::KEYBOARD(DIK_ADD) );
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_ZOOMOUT, SSHORTCUTS::KEYBOARD(DIK_SUBTRACT) );
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_ZOOM,	 SSHORTCUTS::MOUSE(DXMOUSE_MIDDLE) );
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_DIRECTIONMODE, SSHORTCUTS::KEYBOARD(DIK_CAPSLOCK) | SSHORTCUTS::MOUSE(DXMOUSE_MIDDLE) );

	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_ACTIONCANCEL,	SSHORTCUTS::KEYBOARD(DIK_ESCAPE) );

	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_ITEMDROP,		SSHORTCUTS::MOUSE(DXMOUSE_LEFT) );
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_ITEMDROP_USE,	SSHORTCUTS::MOUSE(DXMOUSE_RIGHT) );

	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_MOVING,		 SSHORTCUTS::MOUSE(DXMOUSE_LEFT) );
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_RUNSKILL,		 SSHORTCUTS::MOUSE(DXMOUSE_RIGHT) );
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_ACTION_SELECT,	 SSHORTCUTS::KEYBOARD(DIK_A) );
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_ACTION_CURSOR,	 SSHORTCUTS::MOUSE(DXMOUSE_LEFT) );

	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_DOMINATE_CONTROL, SSHORTCUTS::KEYBOARD(DIK_LCONTROL) );
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CONTROL, SSHORTCUTS::KEYBOARD(DIK_LCONTROL));

	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_TAR_P2PMENU,	 SSHORTCUTS::KEYBOARD(DIK_LSHIFT) );
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_TAR_ONLYITEM,	 SSHORTCUTS::KEYBOARD(DIK_LMENU) );

	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_TARGET_SELECT,			SSHORTCUTS::MOUSE(DXMOUSE_LEFT) );
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_TARGET_SELECT_AROUND,	SSHORTCUTS::KEYBOARD(DIK_TAB) );

 	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_MOVE_FRONT,	SSHORTCUTS::KEYBOARD(DIK_W));
 	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_MOVE_BACK,	SSHORTCUTS::KEYBOARD(DIK_S));
 	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_MOVE_LEFT,	SSHORTCUTS::KEYBOARD(DIK_A));
 	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_MOVE_RIGHT, SSHORTCUTS::KEYBOARD(DIK_D));
 	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_MOVE_UP,	SSHORTCUTS::KEYBOARD(DIK_Q));
 	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_MOVE_DOWN,	SSHORTCUTS::KEYBOARD(DIK_E));
 
 	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_UP,		SSHORTCUTS::KEYBOARD(DIK_UP));
 	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_DOWN,	SSHORTCUTS::KEYBOARD(DIK_DOWN));
 	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_LEFT,	SSHORTCUTS::KEYBOARD(DIK_LEFT));
 	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_RIGHT,	SSHORTCUTS::KEYBOARD(DIK_RIGHT));
 
 	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_FLYCAMERACONTROL,SSHORTCUTS::KEYBOARD(DIK_SLASH));
 	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_INCREASE_MOVESPEED,		SSHORTCUTS::KEYBOARD(DIK_NUMPAD7));
 	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_DECREASE_MOVESPEED,		SSHORTCUTS::KEYBOARD(DIK_NUMPAD4));
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_INCREASE_ROTATESPEED,	SSHORTCUTS::KEYBOARD(DIK_NUMPAD8));
 	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_DECREASE_ROTATESPEED,	SSHORTCUTS::KEYBOARD(DIK_NUMPAD5));
 	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_TARGET_SELECT,					SSHORTCUTS::MOUSE(DXMOUSE_RIGHT) );
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_INCREASE_INTERPOLATION_MOVETIME,	SSHORTCUTS::KEYBOARD(DIK_NUMPAD1));
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_DECREASE_INTERPOLATION_MOVETIME,	SSHORTCUTS::KEYBOARD(DIK_NUMPAD2));
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_CLEAR_INTERPOLATION_TIME,			SSHORTCUTS::KEYBOARD(DIK_NUMPAD3));
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_INCREASE_INTERPOLATION_ROTATETIME,	SSHORTCUTS::KEYBOARD(DIK_NUMPAD9));
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_DECREASE_INTERPOLATION_ROTATETIME,	SSHORTCUTS::KEYBOARD(DIK_NUMPAD6));
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_INCREASE_INTERPOLATION_TARGETSELECTTIME,	SSHORTCUTS::KEYBOARD(DIK_NUMPAD0));
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_DECREASE_INTERPOLATION_TARGETSELECTTIME,	SSHORTCUTS::KEYBOARD(DIK_DECIMAL));

	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_CAMERA_PLAY, SSHORTCUTS::KEYBOARD(DIK_F5) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_CAMERA_STOP, SSHORTCUTS::KEYBOARD(DIK_F6) );
	IMPLEMENT_SHORTCUTS( EMSHORTCUTS_CAMERA_REWIND_PLAY, SSHORTCUTS::KEYBOARD(DIK_F7) );

	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CONFIRM, SSHORTCUTS::KEYBOARD( DIK_RETURN ) | SSHORTCUTS::KEYBOARD( DIK_NUMPADENTER ) );
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_INTERACT_DROPITEM, SSHORTCUTS::KEYBOARD( DIK_LMENU ) );

	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CHANGE_CHARSLOT0, SSHORTCUTS::KEYBOARD(DIK_LCONTROL) & SSHORTCUTS::KEYBOARD(DIK_1) );
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CHANGE_CHARSLOT1, SSHORTCUTS::KEYBOARD(DIK_LCONTROL) & SSHORTCUTS::KEYBOARD(DIK_2) );
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CHANGE_CHARSLOT2, SSHORTCUTS::KEYBOARD(DIK_LCONTROL) & SSHORTCUTS::KEYBOARD(DIK_3) );
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CHANGE_CHARSLOT3, SSHORTCUTS::KEYBOARD(DIK_LCONTROL) & SSHORTCUTS::KEYBOARD(DIK_4) );
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CHANGE_CHARSLOT4, SSHORTCUTS::KEYBOARD(DIK_LCONTROL) & SSHORTCUTS::KEYBOARD(DIK_5) );
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CHANGE_CHARSLOT5, SSHORTCUTS::KEYBOARD(DIK_LCONTROL) & SSHORTCUTS::KEYBOARD(DIK_6) );
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CHANGE_CHARSLOT6, SSHORTCUTS::KEYBOARD(DIK_LCONTROL) & SSHORTCUTS::KEYBOARD(DIK_7) );
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CHANGE_CHARSLOT7, SSHORTCUTS::KEYBOARD(DIK_LCONTROL) & SSHORTCUTS::KEYBOARD(DIK_8) );
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CHANGE_CHARSLOT8, SSHORTCUTS::KEYBOARD(DIK_LCONTROL) & SSHORTCUTS::KEYBOARD(DIK_9) );
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CHANGE_CHARSLOT9, SSHORTCUTS::KEYBOARD(DIK_LCONTROL) & SSHORTCUTS::KEYBOARD(DIK_0) );
}

void CKeySetting::SetCameraMoveShortcuts()
{
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_MOVE_FRONT,	SSHORTCUTS::KEYBOARD(DIK_W));
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_MOVE_BACK,	SSHORTCUTS::KEYBOARD(DIK_S));
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_MOVE_LEFT,	SSHORTCUTS::KEYBOARD(DIK_A));
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_MOVE_RIGHT, SSHORTCUTS::KEYBOARD(DIK_D));
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_MOVE_UP,	SSHORTCUTS::KEYBOARD(DIK_Q));
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_MOVE_DOWN,	SSHORTCUTS::KEYBOARD(DIK_E));

	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_UP,		SSHORTCUTS::KEYBOARD(DIK_UP));
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_DOWN,	SSHORTCUTS::KEYBOARD(DIK_DOWN));
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_LEFT,	SSHORTCUTS::KEYBOARD(DIK_LEFT));
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_RIGHT,	SSHORTCUTS::KEYBOARD(DIK_RIGHT));
	
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_FLYCAMERACONTROL,SSHORTCUTS::KEYBOARD(DIK_SLASH));
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_INCREASE_MOVESPEED,		SSHORTCUTS::KEYBOARD(DIK_NUMPAD7));
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_DECREASE_MOVESPEED,		SSHORTCUTS::KEYBOARD(DIK_NUMPAD4));
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_INCREASE_ROTATESPEED,	SSHORTCUTS::KEYBOARD(DIK_NUMPAD8));
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_CAMERA_DECREASE_ROTATESPEED,	SSHORTCUTS::KEYBOARD(DIK_NUMPAD5));
	IMPLEMENT_HIDESHORTCUTS( EMSHORTCUTS_TARGET_SELECT,					SSHORTCUTS::MOUSE(DXMOUSE_RIGHT) );
}