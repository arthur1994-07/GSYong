#include "StdAfx.h"
#include <process.h>
#include "../../../EngineLib/Common/SubPath.h"
#include "../../../EngineLib/DxTools/DxGrapUtils.h"
#include "../../../EngineLib/DxResponseMan.h"
#include "../../../EngineLib/GUInterface/UITextControl.h"
#include "../../../EngineLib/GUInterface/GameTextControl.h"
#include "../../../EngineLib/DxTools/d3dfont.h"
#include "../../../EngineLib/DxTools/TextureManager.h"
#include "../../../EngineLib/DxTools/DxFontMan.h"

#include "../../../RanLogicClient/GLGaeaClient.h"
#include "../../../RanLogicClient/Stage/DxGlobalStage.h"
#include "../../../BugTrap/BugTrap.h"

#include "SimpleMessageMan.h"
#include "LoadingThread.h"

// ----------------------------------------------------------------------------
#include "../../../SigmaCore/DebugInclude.h"
// ----------------------------------------------------------------------------

using namespace NLOADINGTHREAD;

//	-------------------- [ CUSTOM VERTEX 제어 메소드 설정 ] --------------------

static HRESULT	CreateVB ( LPDIRECT3DDEVICEQ pd3dDevice, LPDIRECT3DVERTEXBUFFERQ& pTextureVB, TEXTUREVERTEX VertexArray[6] )
{	
	HRESULT hr = S_OK;
	hr = pd3dDevice->CreateVertexBuffer( 6*sizeof(TEXTUREVERTEX), 0, TEXTUREVERTEXFVF,
											D3DPOOL_MANAGED, &pTextureVB, NULL );
    if( FAILED ( hr ) )	return hr;    

    VOID* pVertices;
	hr = pTextureVB->Lock( 0, sizeof ( TEXTUREVERTEX ) * 6, (VOID**)&pVertices, 0 );
    if( FAILED ( hr ) ) return hr;

    memmove( pVertices, VertexArray, sizeof ( TEXTUREVERTEX ) * 6 );

    hr = pTextureVB->Unlock();
	if ( FAILED ( hr ) ) return hr;

	return S_OK;
}

static void SetVertexPos ( TEXTUREVERTEX VertexArray[6], float LEFT, float TOP, float SIZEX, float SIZEY )
{
	float RIGHT = LEFT + SIZEX;
	float BOTTOM = TOP + SIZEY;

	VertexArray[0].SetPos ( LEFT,	TOP );
	VertexArray[1].SetPos ( RIGHT,	TOP);
	VertexArray[2].SetPos ( LEFT,	BOTTOM );

	VertexArray[3].SetPos ( LEFT,	BOTTOM );
	VertexArray[4].SetPos ( RIGHT,	TOP);
	VertexArray[5].SetPos ( RIGHT,	BOTTOM );
}

static void SetTexturePos ( TEXTUREVERTEX VertexArray[6], float LEFT, float TOP, float SIZEX, float SIZEY, float TEX_SIZEX, float TEX_SIZEY )
{
	float RIGHT = LEFT + SIZEX;
	float BOTTOM = TOP + SIZEY;

	VertexArray[0].SetTexPos ( LEFT / TEX_SIZEX,	TOP / TEX_SIZEY );
	VertexArray[1].SetTexPos ( RIGHT / TEX_SIZEX,	TOP / TEX_SIZEY);
	VertexArray[2].SetTexPos ( LEFT / TEX_SIZEX,	BOTTOM / TEX_SIZEY );

	VertexArray[3].SetTexPos ( LEFT / TEX_SIZEX,	BOTTOM / TEX_SIZEY );
	VertexArray[4].SetTexPos ( RIGHT / TEX_SIZEX,	TOP / TEX_SIZEY );
	VertexArray[5].SetTexPos ( RIGHT / TEX_SIZEX,	BOTTOM / TEX_SIZEY );
}

static HRESULT Render ( LPDIRECT3DDEVICEQ pd3dDevice, LPDIRECT3DTEXTUREQ pLoadingTexture, LPDIRECT3DVERTEXBUFFERQ pTextureVB )
{
	HRESULT hr = S_OK;

	hr = pd3dDevice->SetTexture ( 0, pLoadingTexture );
	if ( FAILED ( hr ) ) return hr;

    hr = pd3dDevice->SetStreamSource( 0, pTextureVB, 0, sizeof(TEXTUREVERTEX) );
	if ( FAILED ( hr ) ) return hr;

	hr = pd3dDevice->SetFVF( TEXTUREVERTEXFVF );
	if ( FAILED ( hr ) ) return hr;

	hr = pd3dDevice->DrawPrimitive( D3DPT_TRIANGLELIST, 0, 2 );
	if ( FAILED ( hr ) ) return hr;

	hr = pd3dDevice->SetTexture ( 0, NULL );
	if ( FAILED ( hr ) ) return hr;

	return S_OK;
}

BOOL MessagePump()
{
   MSG msg;

   while(::PeekMessage(&msg, NULL, 0, 0, PM_NOREMOVE))
   {
       if(AfxGetApp() -> PumpMessage())
       {
             ::PostQuitMessage(0);
             return FALSE;
       }
   }

   return TRUE;
}

unsigned int WINAPI	LoadingThread(LPVOID pData)
{
    BT_SetTerminate();

    MIN_ASSERT(pData);

    GLGaeaClient* pGaeaClient = (GLGaeaClient*) pData;
	if (n_strTextureName.IsEmpty() || n_strTextureName == _T("null"))
	{
		srand((UINT) time(NULL));
		int nIndex = (rand() % 2) + 1;

		n_strTextureName.Format( "loading_%03d.dds", nIndex );	
	}

    const SUBPATH* pPath = pGaeaClient->GetSubPath();
	TCHAR szTexture[256] = {0};
	StringCchPrintf(szTexture, 256, n_strTextureName.GetString(), n_szAppPath, pPath->TextureFileRoot().c_str()); //SUBPATH::TEXTURE_FILE_ROOT );

	LPDIRECT3DDEVICEQ& pd3dDevice = *n_ppd3dDevice;
	LPDIRECT3DTEXTUREQ pLoadingTexture = NULL;
	LPDIRECT3DTEXTUREQ pGradeTex = NULL;
	LPDIRECT3DTEXTUREQ pGradeTex2 = NULL;
	LPDIRECT3DTEXTUREQ pGradeTex3 = NULL;
	//LPDIRECT3DTEXTUREQ pCopyRightTex = NULL;
	LPDIRECT3DTEXTUREQ pHelpTex = NULL;
	LPDIRECT3DTEXTUREQ pLogoTex = NULL;
	LPDIRECT3DTEXTUREQ pMapTex = NULL;
	LPDIRECT3DTEXTUREQ pTopBackTex = NULL;
	LPDIRECT3DTEXTUREQ pUnderBackTex = NULL;
	LPDIRECT3DTEXTUREQ pLoadingBackTex = NULL;


	HRESULT hr = S_OK;
	hr = TextureManager::LoadTexture( szTexture, pd3dDevice, pLoadingTexture, 0, 0 );
	if ( FAILED ( hr ) )
	{		
		DeWait ();
		n_ExitState = eERROR;
		return 0;
	}

	std::string szGradeName = "Loading_st.dds";
	{
		hr = TextureManager::LoadTexture( szGradeName.c_str(), pd3dDevice, pGradeTex, 0, 0 );
		if ( FAILED ( hr ) )
		{		
			DeWait ();
			n_ExitState = eERROR;
			return 0;
		}
	}

	std::string szGradeName2 = "Certification.dds";
	{
		if ( n_bOVER15 )
		{
			hr = TextureManager::LoadTexture( szGradeName2.c_str(), pd3dDevice, pGradeTex2, 0, 0 );
			if ( FAILED ( hr ) )
			{		
				DeWait ();
				n_ExitState = eERROR;
				return 0;
			}
		}
	}

	std::string szGradeName3 = "Agetext.dds";
	{
		if ( n_bOVER15 )
		{
			hr = TextureManager::LoadTexture( szGradeName3.c_str(), pd3dDevice, pGradeTex3, 0, 0 );
			if ( FAILED ( hr ) )
			{		
				DeWait ();
				n_ExitState = eERROR;
				return 0;
			}
		}
	}

	std::string szHelpName = "HintIcon.dds";
	{
		hr = TextureManager::LoadTexture( szHelpName.c_str(), pd3dDevice, pHelpTex, 0, 0 );
		if ( FAILED ( hr ) )
		{		
			DeWait ();
			n_ExitState = eERROR;
			return 0;
		}
	}

	std::string szLogoName = "mincomslogo.dds";
	if ( n_bFirst )
	{
		hr = TextureManager::LoadTexture( szLogoName.c_str(), pd3dDevice, pLogoTex, 0, 0 );
		if ( FAILED ( hr ) )
		{		
			DeWait ();
			n_ExitState = eERROR;
			return 0;
		}
	}

	std::string szMapName = "mapnameback.dds";
	{
		hr = TextureManager::LoadTexture( szMapName.c_str(), pd3dDevice, pMapTex, 0, 0 );
		if ( FAILED ( hr ) )
		{		
			DeWait ();
			n_ExitState = eERROR;
			return 0;
		}
	}

	std::string szTopBackName = "ld_top.dds";
	{
		hr = TextureManager::LoadTexture( szTopBackName.c_str(), pd3dDevice, pTopBackTex, 0, 0 );
		if ( FAILED ( hr ) )
		{		
			DeWait ();
			n_ExitState = eERROR;
			return 0;
		}
	}

	std::string szUnderBackName = "ld_under.dds";
	{
		hr = TextureManager::LoadTexture( szUnderBackName.c_str(), pd3dDevice, pUnderBackTex, 0, 0 );
		if ( FAILED ( hr ) )
		{		
			DeWait ();
			n_ExitState = eERROR;
			return 0;
		}
	}

	std::string szLoadingBackName = "ld_back.dds";
	{
		hr = TextureManager::LoadTexture( szLoadingBackName.c_str(), pd3dDevice, pLoadingBackTex, 0, 0 );
		if ( FAILED ( hr ) )
		{		
			DeWait ();
			n_ExitState = eERROR;
			return 0;
		}
	}

	CString strMessage;
	INT nStrLength;
	CString strTip[ TIP_SIZE ];
	std::auto_ptr< CSimpleMessageMan > pSimple;
	INT nTipIndex = 0;

	bool bTutoMap = false;
	for ( int i = 0; i < GLCONST_CHAR::wTUTORIA_NUM; i++ )
	{
		if ( n_sMapID.wMainID == GLCONST_CHAR::nidTUTORIALMAP[ i ].wMainID )
		{
			bTutoMap = true;
			break;
		}
	}

	if ( bTutoMap)
	{
		CString strName;
		strName.Format( "TUTORIAL_HINT_0" );
		strMessage = ID2GAMEINTEXT(strName);

		nStrLength = strMessage.GetLength();

		while( TRUE )
		{
			if (!AfxExtractSubString(strTip[nTipIndex], strMessage, nTipIndex, _T('\n')))
				break;
            nTipIndex++;
		}
	}
	else
	{
		if( pSimple.get() )
		{
            DxGlobalStage* pGlobalStage = pGaeaClient->GetGlobalStage();
			CString strFullPath = pGlobalStage->GetAppPath();
			if( !strFullPath.IsEmpty() )
			{
				strFullPath += pPath->GLogicPath().c_str(); //SUBPATH::GLOGIC_FILE;
				strFullPath += ID2GAMEWORD("TIP_FILE");
				pSimple->LoadMessage( strFullPath );
				strMessage = pSimple->SetRendLoading();
				nStrLength = strMessage.GetLength();

				while( TRUE )
				{
                    // undefined behavior
					if (!AfxExtractSubString(strTip[nTipIndex], strMessage, nTipIndex, _T('\n')))
						break;
                    ++nTipIndex;
				}
			}
	}
	}

	CString strMapName;
	INT nStrMapLength;
	if( n_sMapID != NATIVEID_NULL() && pGaeaClient->GetMapName ( n_sMapID ) != NULL )
	{
		strMapName.Format( _T("< %s >"), pGaeaClient->GetMapName ( n_sMapID ) );
		nStrMapLength = strMapName.GetLength();
	}
	else
	{
		nStrMapLength = 0;
	}

	//CString strMapName;
	//INT nMapNameLength;
	//{
	//	strMapName = m_pGaeaClient->GetMapName ( m_pGaeaClient->GetActiveMapID() );
	//	if( strMapName == _T("(null)") ) strMapName.Empty();
	//	nMapNameLength = strMapName.GetLength();
	//}


	//std::string szCopyRight = "CopyRight.tga";
	//hr = TextureManager::LoadTexture( szCopyRight.c_str(), pd3dDevice, pCopyRightTex, 0, 0 );
	//if ( FAILED ( hr ) )
	//{		
	//	DeWait ();
	//	n_ExitState = eERROR;
	//	return 0;
	//}

	///////////////////////////////////////////////////////////////////////////////
	//	[TOGGLE SWITCH] 텍스쳐 로딩완료
	DeWait ();
	///////////////////////////////////////////////////////////////////////////////

	RECT rect;
	GetClientRect ( n_hWnd, &rect );
	
	const float fWidth = float(rect.right - rect.left);
	const float fHeight = float(rect.bottom - rect.top);

	const float	fRealImageX = 1024.0f;
	const float	fRealImageY = 768.0f;
	const float	fImageSize = 1023.0f;

	const float fWidthRatio = fWidth / fRealImageX;
	const float fHeightRatio= fHeight / fRealImageY;

	const float LeftPos  = 0.0f;
	const float TopPos   = 0.0f;
	const float RightPos = fWidth;
	const float BottomPos= fHeight;

	float ROOT_LEFT		= LeftPos;
	float ROOT_TOP		= TopPos;
	float ROOT_SIZEX	= fWidth;
	float ROOT_SIZEY	= fHeight;

	DWORD LoadingTime	= 500;

	//const FLOAT fCopyRightImageSizeX = 1023.0f;
	//const FLOAT fCopyRightImageSizeY = 15.0f;

	const D3DXVECTOR2 vProgressBarTex ( 0, 769 );
	const D3DXVECTOR2 vProgressBarBackTex ( 0, 791 );
	const D3DXVECTOR2 vProgressBarSize ( 582, 9 );
	const D3DXVECTOR2 TextureRenderPos ( 215, 584 );

	//const D3DXVECTOR2 vCopyrightTex ( 0, 0 );
	//const D3DXVECTOR2 vCopyrightSize ( 1024, 16 );

	const D3DXVECTOR2 vOver15 ( 100, 20 );		// Right 정렬 좌표
	const D3DXVECTOR2 vOver15Size ( 92, 109 );
	const D3DXVECTOR2 vOver15Tex ( 420, 0 );
	const D3DXVECTOR2 vOver15Full ( 512, 128 );

	const D3DXVECTOR2 vOverGrade ( 202, 20 );	// Right 정렬 좌표
	const D3DXVECTOR2 vOverGradeSize ( 92, 109 );
	const D3DXVECTOR2 vOverGradeTex ( 420, 147 );
	const D3DXVECTOR2 vOverGradeFull ( 512, 256 );

	const D3DXVECTOR2 vAgeText ( 0, 0 );			// Right 정렬 좌표
	const D3DXVECTOR2 vAgeTextSize ( 726, 380 );
	const D3DXVECTOR2 vAgeTextTex ( 2, 2 );
	const D3DXVECTOR2 vAgeTextFull ( 1024, 512 );

	const D3DXVECTOR2 vHelpTex ( 0, 0 );
	const D3DXVECTOR2 vHelpSize ( 97, 60 );
	const D3DXVECTOR2 vHelpTexSize ( 128, 64 );

	const D3DXVECTOR2 vLodingTex ( 0, 0 );
	const D3DXVECTOR2 vLodingSize ( 104, 104 );
	const D3DXVECTOR2 vLodingTexSize ( 512, 128 );
	const D3DXVECTOR2 vLodingTexGap ( 105, 0 );

	const D3DXVECTOR2 vLogoTex ( 0, 0 );
	const D3DXVECTOR2 vLogoSize ( 148, 38 );
	const D3DXVECTOR2 vLogoTexSize ( 256, 64 );

	const D3DXVECTOR2 vMapTex ( 0, 0 );
	const D3DXVECTOR2 vMapSize ( 340, 56 );
	const D3DXVECTOR2 vMapTexSize ( 512, 64 );

	const D3DXVECTOR2 vImageTex ( 0, 0 );
	const D3DXVECTOR2 vImageSize ( 1024, 512 );
	const D3DXVECTOR2 vImageTexSize ( 1024, 512 );

	const D3DXVECTOR2 vTopTex ( 0, 0 );
	const D3DXVECTOR2 vTopSize ( 1024, 147 );
	const D3DXVECTOR2 vTopTexSize ( 1024, 256 );

	const D3DXVECTOR2 vUnderTex ( 0, 0 );
	const D3DXVECTOR2 vUnderSize ( 1024, 147 );
	const D3DXVECTOR2 vUnderTexSize ( 1024, 256 );

	const D3DXVECTOR2 vLoadingBackTex ( 0, 0 );
	const D3DXVECTOR2 vLoadingBackSize ( 126, 126 );
	const D3DXVECTOR2 vLoadingBackTexSize ( 128, 128 );

	D3DXVECTOR2 vProgressBarAlignSize;
	vProgressBarAlignSize.x = static_cast<float>(floor(vProgressBarSize.x * fWidth / fRealImageX));
	vProgressBarAlignSize.y = static_cast<float>(floor(vProgressBarSize.y * fHeight/ fRealImageX));

	D3DXVECTOR2 vProgressBarAlign;
	vProgressBarAlign.x = (fWidth - vProgressBarAlignSize.x)/2.0f;
	vProgressBarAlign.y = static_cast<float>(floor(TextureRenderPos.y * fHeight/ fRealImageY));

	D3DXVECTOR2 vCopyrightAlign;
	vCopyrightAlign.x = 15.0f;
	vCopyrightAlign.y = ( fHeight * 0.93f );

	D3DXVECTOR2 vImageAlign;
	vImageAlign.x = 0.5f;
	vImageAlign.y = ( vTopSize.y * 0.95f );

	D3DXVECTOR2 vTopAlign;
	vTopAlign.x = 0.5f;
	vTopAlign.y = 0.5f;

	D3DXVECTOR2 vUnderAlign;
	vUnderAlign.x = 0.5f;
	vUnderAlign.y = fHeight - vUnderSize.y + 0.5f;

	D3DXVECTOR2 vLoadingBackAlign;
	vLoadingBackAlign.x = (fWidth - vLoadingBackSize.x) * 0.95f + 0.5f;
	vLoadingBackAlign.y = vUnderAlign.y + 10.0f;

	D3DXVECTOR2 vLoadingAlign;
	vLoadingAlign.x = vLoadingBackAlign.x + ( ( vLoadingBackSize.x - vLodingSize.x ) / 2.0f );
	vLoadingAlign.y = vLoadingBackAlign.y + ( ( vLoadingBackSize.y - vLodingSize.y ) / 2.0f );
	//vLoadingAlign.x = ( fWidth - ( vLodingSize.x + 60.5f ) );
	//vLoadingAlign.y = ( fHeight - ( vLodingSize.y + 30.5f ) );

	D3DXVECTOR2 vLogoAlign;
	vLogoAlign.x = ( vLoadingBackAlign.x - (vLogoSize.x + 30.0f ) );
	vLogoAlign.y = ( fHeight * 0.9f );

	D3DXVECTOR2 vHelpAlign;
	vHelpAlign.x = ( fWidth * 0.10f ) + 0.5f;
	vHelpAlign.y = vUnderAlign.y + ( ( vUnderSize.y - vHelpSize.y ) / 2.0f );

	D3DXVECTOR2 vTipAlign;
	vTipAlign.x = ( ( fWidth * 0.10f ) + vHelpSize.x ) + 0.5f;//( fWidth - vHelpSize.x ) / 2.0f + 65.0f;
	vTipAlign.y = vUnderAlign.y + ( ( vUnderSize.y - vHelpSize.y ) / 2.0f );

	D3DXVECTOR2 vMapBackAlign;
	vMapBackAlign.x = ( ( fWidth - vMapSize.x ) / 2.0f ) + 20.0f + 0.5f ;
	vMapBackAlign.y = vTopAlign.y + ( ( vTopSize.y - vMapSize.y ) * 0.7f );

	D3DXVECTOR2 vMapNameAlign;
	vMapNameAlign.x = ( fWidth - ( nStrMapLength * 9 ) ) / 2.0f;
	vMapNameAlign.y = vMapBackAlign.y + ( vMapSize.y * 0.4f );

	D3DXVECTOR2 vOver15Align;
	vOver15Align.x = (fWidth - vOver15.x) * 0.95f + 0.5f;
	vOver15Align.y = vOver15.y;

	D3DXVECTOR2 vOverGradeAlign;
	vOverGradeAlign.x = vOver15Align.x - vOverGradeSize.x;
	vOverGradeAlign.y = vOverGrade.y;

	D3DXVECTOR2 vAgeTextAlign;
	vAgeTextAlign.x = (fWidth -  ( vAgeTextSize.x * fWidthRatio  )) / 2.0f + 0.5f;
	vAgeTextAlign.y = (fHeight - ( vAgeTextSize.y * fHeightRatio )) / 2.0f + 0.5f;

	//	밑 배경
	LPDIRECT3DVERTEXBUFFERQ pTextureVB = NULL; // Buffer to hold vertices
	{
		TEXTUREVERTEX VertexArray[6];
		SetVertexPos ( VertexArray, ROOT_LEFT + vImageAlign.x, ROOT_TOP + vImageAlign.y, ROOT_SIZEX, vUnderAlign.y - vTopSize.y + 20.0f );
		SetTexturePos( VertexArray, vImageTex.x, vImageTex.y, vImageSize.x, vImageSize.y, vImageTexSize.x, vImageTexSize.y );

		if ( FAILED ( CreateVB ( pd3dDevice, pTextureVB, VertexArray ) ) )
		{
			n_ExitState = eERROR;
			return 0;
		}
	}

	//	프로그래스바 바닥
	LPDIRECT3DVERTEXBUFFERQ pProgressBackVB = NULL;
	{
		TEXTUREVERTEX VertexArray[6];
		SetVertexPos ( VertexArray, ROOT_LEFT + vProgressBarAlign.x, ROOT_TOP + vProgressBarAlign.y, vProgressBarAlignSize.x, vProgressBarSize.y );
		SetTexturePos( VertexArray, vProgressBarBackTex.x, vProgressBarBackTex.y, vProgressBarSize.x, vProgressBarSize.y, fImageSize, fImageSize );

		if ( FAILED ( CreateVB ( pd3dDevice, pProgressBackVB, VertexArray ) ) )
		{
			n_ExitState = eERROR;
			return 0;
		}
	}

	////	카피라이트
	//LPDIRECT3DVERTEXBUFFERQ pCopyrightVB = NULL;
	//{
	//	TEXTUREVERTEX VertexArray[6];
	//	SetVertexPos ( VertexArray, ROOT_LEFT + vCopyrightAlign.x, ROOT_TOP + vCopyrightAlign.y, vCopyrightSize.x, vCopyrightSize.y );
	//	SetTexturePos( VertexArray, vCopyrightTex.x, vCopyrightTex.y, vCopyrightSize.x, vCopyrightSize.y, fCopyRightImageSizeX, fCopyRightImageSizeY );

	//	if ( FAILED ( CreateVB ( pd3dDevice, pCopyrightVB, VertexArray ) ) )
	//	{
	//		n_ExitState = eERROR;
	//		return 0;
	//	}
	//}

	//	프로그래스 바
	LPDIRECT3DVERTEXBUFFERQ pProgressBarVB = NULL;
	{
		TEXTUREVERTEX VertexArray[6];
		SetVertexPos ( VertexArray, ROOT_LEFT + vProgressBarAlign.x, ROOT_TOP + vProgressBarAlign.y, vProgressBarAlignSize.x, vProgressBarSize.y );
		SetTexturePos( VertexArray, vProgressBarTex.x, vProgressBarTex.y, vProgressBarSize.x, vProgressBarSize.y, fImageSize, fImageSize );

		if ( FAILED ( CreateVB ( pd3dDevice, pProgressBarVB, VertexArray ) ) )
		{
			n_ExitState = eERROR;
			return 0;
		}
	}

	//	15금표시
	LPDIRECT3DVERTEXBUFFERQ pGradeVB = NULL;
	{
		TEXTUREVERTEX VertexArray[6];
		SetVertexPos ( VertexArray, ROOT_LEFT + vOver15Align.x, ROOT_TOP + vOver15Align.y, vOver15Size.x, vOver15Size.y );
		SetTexturePos( VertexArray, vOver15Tex.x, vOver15Tex.y, vOver15Size.x, vOver15Size.y, vOver15Full.x, vOver15Full.y );

		if ( FAILED ( CreateVB ( pd3dDevice, pGradeVB, VertexArray ) ) )
		{
			n_ExitState = eERROR;
			return 0;
		}
	}


	//	폭력성 표시
	LPDIRECT3DVERTEXBUFFERQ pGradeVB2 = NULL;
	{
		TEXTUREVERTEX VertexArray[6];
		SetVertexPos ( VertexArray, ROOT_LEFT + vOverGradeAlign.x, ROOT_TOP + vOverGradeAlign.y, vOverGradeSize.x, vOverGradeSize.y );
		SetTexturePos( VertexArray, vOverGradeTex.x, vOverGradeTex.y, vOverGradeSize.x, vOverGradeSize.y, vOverGradeFull.x, vOverGradeFull.y );

		if ( FAILED ( CreateVB ( pd3dDevice, pGradeVB2, VertexArray ) ) )
		{
			n_ExitState = eERROR;
			return 0;
		}
	}

	D3DXVECTOR2 vAgeTextSize2;

	vAgeTextSize2.x = vAgeTextSize.x * fWidthRatio + 0.5f;
	vAgeTextSize2.y = vAgeTextSize.y * fHeightRatio + 0.5f;

	//	경고 문구 삽입
	LPDIRECT3DVERTEXBUFFERQ pGradeVB3 = NULL;
	{
		TEXTUREVERTEX VertexArray[6];
		SetVertexPos ( VertexArray, ROOT_LEFT + vAgeTextAlign.x, ROOT_TOP + vAgeTextAlign.y, vAgeTextSize2.x , vAgeTextSize2.y );
		SetTexturePos( VertexArray, vAgeTextTex.x, vAgeTextTex.y, vAgeTextSize.x, vAgeTextSize.y, vAgeTextFull.x, vAgeTextFull.y );

		if ( FAILED ( CreateVB ( pd3dDevice, pGradeVB3, VertexArray ) ) )
		{
			n_ExitState = eERROR;
			return 0;
		}
	}

	//	도움말 창
	LPDIRECT3DVERTEXBUFFERQ pHelpVB = NULL;
	{
		TEXTUREVERTEX VertexArray[6];
		SetVertexPos ( VertexArray, ROOT_LEFT + vHelpAlign.x, ROOT_TOP + vHelpAlign.y, vHelpSize.x, vHelpSize.y );
		SetTexturePos( VertexArray, vHelpTex.x, vHelpTex.y, vHelpSize.x, vHelpSize.y, vHelpTexSize.x, vHelpTexSize.y );

		if ( FAILED ( CreateVB ( pd3dDevice, pHelpVB, VertexArray ) ) )
		{
			n_ExitState = eERROR;
			return 0;
		}
	}

	//	로딩이미지
    LPDIRECT3DVERTEXBUFFERQ pLodingVB[ LODING_COUNT ] = { NULL, NULL, NULL, NULL };
	{
		TEXTUREVERTEX VertexArray[6];
		for(int i = 0; i < LODING_COUNT; i ++ )
		{
			SetVertexPos ( VertexArray, ROOT_LEFT + vLoadingAlign.x, ROOT_TOP + vLoadingAlign.y, vLodingSize.x, vLodingSize.y );
			SetTexturePos( VertexArray, vLodingTex.x + ( i * vLodingTexGap.x ), vLodingTex.y , vLodingSize.x, vLodingSize.y, vLodingTexSize.x, vLodingTexSize.y );

			if ( FAILED ( CreateVB ( pd3dDevice, pLodingVB[ i ], VertexArray ) ) )
			{
				n_ExitState = eERROR;
				return 0;
			}
		}
	}

	//	로고
	LPDIRECT3DVERTEXBUFFERQ pLogoVB;
	{
		TEXTUREVERTEX VertexArray[6];
		SetVertexPos ( VertexArray, ROOT_LEFT + vLogoAlign.x, ROOT_TOP + vLogoAlign.y, vLogoSize.x, vLogoSize.y );
		SetTexturePos( VertexArray, vLogoTex.x, vLogoTex.y, vLogoSize.x, vLogoSize.y, vLogoTexSize.x, vLogoTexSize.y );

		if ( FAILED ( CreateVB ( pd3dDevice, pLogoVB, VertexArray ) ) )
		{
			n_ExitState = eERROR;
			return 0;
		}
	}

	//맵 배경
	LPDIRECT3DVERTEXBUFFERQ pMapBackVB = NULL;
	{
		TEXTUREVERTEX VertexArray[6];
		SetVertexPos ( VertexArray, ROOT_LEFT + vMapBackAlign.x, ROOT_TOP + vMapBackAlign.y, vMapSize.x, vMapSize.y );
		SetTexturePos( VertexArray, vMapTex.x, vMapTex.y, vMapSize.x, vMapSize.y, vMapTexSize.x, vMapTexSize.y );

		if ( FAILED ( CreateVB ( pd3dDevice, pMapBackVB, VertexArray ) ) )
		{
			n_ExitState = eERROR;
			return 0;
		}
	}

	//TopBack
	LPDIRECT3DVERTEXBUFFERQ pTopBackVB = NULL;
	{
		TEXTUREVERTEX VertexArray[6];
		SetVertexPos ( VertexArray, ROOT_LEFT + vTopAlign.x, ROOT_TOP + vTopAlign.y, ROOT_SIZEX, vTopSize.y );
		SetTexturePos( VertexArray, vTopTex.x, vTopTex.y, vTopSize.x, vTopSize.y, vTopTexSize.x, vTopTexSize.y );

		if ( FAILED ( CreateVB ( pd3dDevice, pTopBackVB, VertexArray ) ) )
		{
			n_ExitState = eERROR;
			return 0;
		}
	}

	//UnderBack
	LPDIRECT3DVERTEXBUFFERQ pUnderBackVB = NULL;
	{
		TEXTUREVERTEX VertexArray[6];
		SetVertexPos ( VertexArray, ROOT_LEFT + vUnderAlign.x, ROOT_TOP + vUnderAlign.y, ROOT_SIZEX, vUnderSize.y );
		SetTexturePos( VertexArray, vUnderTex.x, vUnderTex.y, vUnderSize.x, vUnderSize.y, vUnderTexSize.x, vUnderTexSize.y );

		if ( FAILED ( CreateVB ( pd3dDevice, pUnderBackVB, VertexArray ) ) )
		{
			n_ExitState = eERROR;
			return 0;
		}
	}

	//LoadingBack
	LPDIRECT3DVERTEXBUFFERQ pLoadingBackVB = NULL;
	{
		TEXTUREVERTEX VertexArray[6];
		SetVertexPos ( VertexArray, ROOT_LEFT + vLoadingBackAlign.x, ROOT_TOP + vLoadingBackAlign.y, vLoadingBackSize.x, vLoadingBackSize.y );
		SetTexturePos( VertexArray, vLoadingBackTex.x, vLoadingBackTex.y, vLoadingBackSize.x, vLoadingBackSize.y, vLoadingBackTexSize.x, vLoadingBackTexSize.y );

		if ( FAILED ( CreateVB ( pd3dDevice, pLoadingBackVB, VertexArray ) ) )
		{
			n_ExitState = eERROR;
			return 0;
		}
	}

	// CopyRight 출력용 폰트에 크리티컬 섹션 사용 설정
	CD3DFontPar* pFont = m_pEngineDevice->LoadFont( _DEFAULT_FONT, 9, _DEFAULT_FONT_FLAG );
	if( pFont )
		pFont->UsageCS( TRUE );

	CD3DFontPar* pFont13 = m_pEngineDevice->LoadFont( _DEFAULT_FONT, 13, _DEFAULT_FONT_FLAG );
	if( pFont13 )
		pFont13->UsageCS( TRUE );

	CD3DFontPar* pFontTip = m_pEngineDevice->LoadFont( _DEFAULT_FONT, 10, _DEFAULT_FONT_FLAG );
	if( pFontTip )
		pFontTip->UsageCS( TRUE );

	//로딩이미지 변경을 위해 인덱스와 시간을 잰다.
	INT nIndex = 0;
	DWORD dwLastTick = GetTickCount();

	//	뿌리기
	while ( n_bRender )
	{
		DWORD dwTime = GetTickCount();
		DWORD ElspTime = dwTime - dwLastTick;
		if( ElspTime > LoadingTime )
		{
			dwLastTick = dwTime;
			nIndex++;
			if( nIndex >= LODING_COUNT )
			{
				nIndex = 0;
			}
		}
		

		//	UPDATE
		{
			{
				const int nMAX_STEP = 11;
				int pri_Step = LOADINGSTEP::GETSTEP();

				float fPercent = static_cast<float>(pri_Step) / static_cast<float>(nMAX_STEP);
				float fTEX_SIZEX = (vProgressBarTex.x + vProgressBarSize.x) * fPercent / fImageSize;
				float fSIZEX = static_cast<float>(ceil((vProgressBarAlign.x + vProgressBarAlignSize.x) * fPercent));

				//	프로그래스바
				{
					VOID* pVertices;
					if( FAILED( pProgressBarVB->Lock( 0, sizeof ( TEXTUREVERTEX ) * 6, (VOID**)&pVertices, 0 ) ) )
					{
						n_ExitState = eERROR;
						if( pFont )
							pFont->UsageCS( FALSE );
                        if( pFont13 )
							pFont13->UsageCS( FALSE );
                        if( pFontTip )
							pFontTip->UsageCS( FALSE );
						return 0;
					}
					TEXTUREVERTEX* pVerticesPart = (TEXTUREVERTEX*)pVertices;
					pVerticesPart[1].x = fSIZEX;
					pVerticesPart[1].tu = fTEX_SIZEX;
					pVerticesPart[4].x = fSIZEX;
					pVerticesPart[4].tu = fTEX_SIZEX;
					pVerticesPart[5].x = fSIZEX;
					pVerticesPart[5].tu = fTEX_SIZEX;

					pProgressBarVB->Unlock();
				}
			}
		}
		
		//if(!MessagePump())		break;

		HRESULT hr;
		if( FAILED( hr = pd3dDevice->TestCooperativeLevel() ) )
		{
			// If the device was lost, do not render until we get it back
			if( D3DERR_DEVICELOST == hr )
			{
				CDebugSet::ToListView ( "[ERROR] D3DERR_DEVICELOST _ LoadingThread() FAILED" );
				continue;
			}

			// Check if the device needs to be resized.
			if( D3DERR_DEVICENOTRESET == hr )
				continue;
		}

		hr = pd3dDevice->Clear( 0L, NULL, D3DCLEAR_TARGET, D3DCOLOR_XRGB(0,0,0), 1.0f, 0L );

		// Begin the scene
		if( SUCCEEDED( pd3dDevice->BeginScene() ) )
		{
			//	밑 바닥
			hr = Render ( pd3dDevice, pLoadingTexture, pTextureVB );

			DWORD dwAlphaBlendEnable;
			pd3dDevice->GetRenderState ( D3DRS_ALPHABLENDENABLE, &dwAlphaBlendEnable );

			pd3dDevice->SetRenderState ( D3DRS_ALPHABLENDENABLE, TRUE );
			pd3dDevice->SetRenderState ( D3DRS_SRCBLEND, D3DBLEND_SRCALPHA );
			pd3dDevice->SetRenderState ( D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA );

			DWORD dwAlphaOP;
			pd3dDevice->GetTextureStageState( 0, D3DTSS_ALPHAOP,   &dwAlphaOP );
			pd3dDevice->SetTextureStageState( 0, D3DTSS_ALPHAOP,   D3DTOP_SELECTARG1 );

			DWORD dwMin, dwMag, dwMip;
			pd3dDevice->GetSamplerState( 0, D3DSAMP_MINFILTER,	&dwMin );
			pd3dDevice->GetSamplerState( 0, D3DSAMP_MAGFILTER,	&dwMag );
			pd3dDevice->GetSamplerState( 0, D3DSAMP_MIPFILTER,	&dwMip );

			pd3dDevice->SetSamplerState( 0, D3DSAMP_MINFILTER,	D3DTEXF_POINT );
			pd3dDevice->SetSamplerState( 0, D3DSAMP_MAGFILTER,	D3DTEXF_POINT );
			pd3dDevice->SetSamplerState( 0, D3DSAMP_MIPFILTER,	D3DTEXF_NONE );

			//	프로그래스 바 바닥
			//hr = Render ( pd3dDevice, pLoadingTexture, pProgressBackVB );

			//	카피라이트
			//hr = Render ( pd3dDevice, pLoadingTexture, pCopyrightVB );

			//	카피라이트
			//hr = Render ( pd3dDevice, pCopyRightTex, pCopyrightVB );
			hr = Render ( pd3dDevice, pTopBackTex, pTopBackVB );
			hr = Render ( pd3dDevice, pUnderBackTex, pUnderBackVB );

			if( !strMessage.IsEmpty() )
			{
				hr = Render ( pd3dDevice, pHelpTex, pHelpVB );
			}

			if( ! strMapName.IsEmpty() )
			{
				hr = Render ( pd3dDevice, pMapTex, pMapBackVB );
			}
			
			hr = Render ( pd3dDevice, pLoadingBackTex, pLoadingBackVB );
			hr = Render ( pd3dDevice, pGradeTex, pLodingVB[ nIndex ] );			

			if( pFont && n_bFirst )
				pFont->DrawText( vCopyrightAlign.x, vCopyrightAlign.y, NS_UITEXTCOLOR::WHITE, ID2GAMEWORD("COPYRIGHT_COMPANY_LOAD") );

			if( pFontTip )
			{
				for( INT i = 0; i < nTipIndex; i++ )
				{
					pFontTip->DrawText( vTipAlign.x, vTipAlign.y + ( i * 16 ), NS_UITEXTCOLOR::WHITE, strTip[ i ] );
				}
			}

			if( pFont13 )
				pFont13->DrawText( vMapNameAlign.x, vMapNameAlign.y, NS_UITEXTCOLOR::WHITE, strMapName );

			//if( pFont )
			//	pFont->DrawText( vMapAlign.x, vMapAlign.y, NS_UITEXTCOLOR::WHITE, strMapName );

			//	프로그래스 바
			//hr = Render ( pd3dDevice, pLoadingTexture, pProgressBarVB );

			//	15금 표시
			if ( n_bOVER15 ) hr = Render ( pd3dDevice, pGradeTex, pGradeVB );	
			if ( n_bOVER15 ) hr = Render ( pd3dDevice, pLogoTex, pLogoVB );
			
			//	폭력성 표시
			if ( n_bOVER15 ) hr = Render ( pd3dDevice, pGradeTex2, pGradeVB2 );

			//	이용등급 설명
			if ( n_bOVER15 ) hr = Render ( pd3dDevice, pGradeTex3, pGradeVB3 );		


			pd3dDevice->SetTextureStageState( 0, D3DTSS_ALPHAOP,   dwAlphaOP );
			pd3dDevice->SetRenderState ( D3DRS_ALPHABLENDENABLE, dwAlphaBlendEnable );

			pd3dDevice->SetSamplerState( 0, D3DSAMP_MINFILTER,	dwMin );
			pd3dDevice->SetSamplerState( 0, D3DSAMP_MAGFILTER,	dwMag );
			pd3dDevice->SetSamplerState( 0, D3DSAMP_MIPFILTER,	dwMip );

			// End the scene.
			pd3dDevice->EndScene();
			pd3dDevice->Present( NULL, NULL, NULL, NULL );
		}
		Sleep(1);
	}

	if( pFont )
		pFont->UsageCS( FALSE );
    if( pFont13 )
		pFont13->UsageCS( FALSE );
    if( pFontTip )
		pFontTip->UsageCS( FALSE );

	SAFE_RELEASE ( pTextureVB );
	SAFE_RELEASE ( pProgressBackVB );
    //SAFE_RELEASE ( pCopyrightVB );
	SAFE_RELEASE ( pProgressBarVB );
	SAFE_RELEASE ( pGradeVB );
	SAFE_RELEASE ( pGradeVB2 );
	SAFE_RELEASE ( pGradeVB3 );
	SAFE_RELEASE ( pHelpVB );
	for( int i = 0; i < LODING_COUNT; i++ )
		SAFE_RELEASE ( pLodingVB[ i ] );
    SAFE_RELEASE ( pLogoVB );
    SAFE_RELEASE ( pMapBackVB );
	SAFE_RELEASE ( pTopBackVB );
	SAFE_RELEASE ( pUnderBackVB );
	SAFE_RELEASE ( pLoadingBackVB );

	TextureManager::ReleaseTexture( szTexture, pLoadingTexture );
	TextureManager::ReleaseTexture( szGradeName.c_str(), pGradeTex );
	TextureManager::ReleaseTexture( szGradeName2.c_str(), pGradeTex2 );
	TextureManager::ReleaseTexture( szGradeName2.c_str(), pGradeTex3 );
    //TextureManager::ReleaseTexture( szCopyRight.c_str(), pCopyRightTex );
	TextureManager::ReleaseTexture( szHelpName.c_str(), pHelpTex );
	TextureManager::ReleaseTexture( szLogoName.c_str(), pLogoTex );
	TextureManager::ReleaseTexture( szMapName.c_str(), pMapTex );
	TextureManager::ReleaseTexture( szTopBackName.c_str(), pTopBackTex );
	TextureManager::ReleaseTexture( szUnderBackName.c_str(), pUnderBackTex );
	TextureManager::ReleaseTexture( szLoadingBackName.c_str(), pLoadingBackTex );

	///////////////////////////////////////////////////////////////////////////////
	//	[TOGGLE SWITCH] 로더 스레드 종료
	DeWait ();
	//////////////////////////////////////////////////////////////////////////////
	n_ExitState = eNORMAL;

	return 0;
}

namespace	NLOADINGTHREAD
{
	DWORD				n_dwThreadID;
	LPDIRECT3DDEVICEQ*	n_ppd3dDevice;
	HWND				n_hWnd;
	BOOL				n_bWait;
	BOOL				n_bRender;
	bool				n_bOVER15;
	bool				n_bFirst;
	char				n_szAppPath[MAX_PATH] = {0};
	int					n_ExitState;
	int					n_Step = 0;
	HANDLE				n_hThread = NULL;
	CString				n_strTextureName;
	SNATIVEID			n_sMapID = NATIVEID_NULL();

	HRESULT	StartThreadLOAD(
            LPDIRECT3DDEVICEQ* ppd3dDevice, 
            HWND hWnd, 
            char* szAppPath, 
            const CString & strTextureName, 
            SNATIVEID sMapID,
            GLGaeaClient* pGaeaClient,
            bool bFirst,
            bool bOVER15)
	{
		n_bOVER15 = bOVER15;
		n_bFirst = bFirst;
		n_ppd3dDevice = ppd3dDevice;
		n_hWnd = hWnd;
		StringCchCopy ( n_szAppPath, MAX_PATH, szAppPath );
		n_strTextureName = strTextureName;

		n_sMapID = sMapID;
		
		n_bRender = TRUE;	//	렌더
		EnWait ();
		n_ExitState = eNORMAL;

		//n_hThread = CreateThread( NULL, 0, LoadingThread, NULL, 0, &n_dwThreadID );
		n_hThread = (HANDLE) ::_beginthreadex(
									NULL,
									0,
									LoadingThread,
									pGaeaClient,
									0,
									(unsigned int*) &n_dwThreadID );
		if ( !n_hThread )
		{
			DeWait();
			return E_FAIL;
		}

		return S_OK;
	}

	void	WaitThread ()
	{
		while ( GetWait () )
		{		
			Sleep( 1 );
		}
		EnWait ();
	}

	void	EndThread ()
	{		
		n_bRender = FALSE;

		if ( n_ExitState == eNORMAL )
		{
			WaitThread ();
		}

		CloseHandle( n_hThread );
		n_hThread = NULL;

		n_strTextureName.Empty();
		n_sMapID = NATIVEID_NULL();
	}

	BOOL	GetWait ()
	{
		return n_bWait;
	}

	void	DeWait  ()
	{
		n_bWait = FALSE;
	}

	void	EnWait ()
	{
		n_bWait = TRUE;
	}

	void	SetStep ( int step )
	{
		n_Step = step;
	}

	int		GetStep ()
	{
		return n_Step;
	}
};
